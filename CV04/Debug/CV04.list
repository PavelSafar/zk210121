
CV04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003574  08003574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003574  08003574  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003574  08003574  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800357c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08003588  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08003588  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004df9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001261  00000000  00000000  00024e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  00026090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000408  00000000  00000000  00026550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b578  00000000  00000000  00026958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000560a  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003f590  00000000  00000000  000374da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00076a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001094  00000000  00000000  00076ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800344c 	.word	0x0800344c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800344c 	.word	0x0800344c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f000 fefd 	bl	80011fc <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f000 fe5b 	bl	80010c4 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fb0c 	bl	8000a34 <__aeabi_dsub>
 800041c:	f000 fe52 	bl	80010c4 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	46de      	mov	lr, fp
 8000436:	464e      	mov	r6, r9
 8000438:	4645      	mov	r5, r8
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	4683      	mov	fp, r0
 800043e:	0007      	movs	r7, r0
 8000440:	030e      	lsls	r6, r1, #12
 8000442:	0048      	lsls	r0, r1, #1
 8000444:	b085      	sub	sp, #20
 8000446:	4692      	mov	sl, r2
 8000448:	001c      	movs	r4, r3
 800044a:	0b36      	lsrs	r6, r6, #12
 800044c:	0d40      	lsrs	r0, r0, #21
 800044e:	0fcd      	lsrs	r5, r1, #31
 8000450:	2800      	cmp	r0, #0
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x26>
 8000454:	e09d      	b.n	8000592 <__aeabi_ddiv+0x162>
 8000456:	4b95      	ldr	r3, [pc, #596]	; (80006ac <__aeabi_ddiv+0x27c>)
 8000458:	4298      	cmp	r0, r3
 800045a:	d039      	beq.n	80004d0 <__aeabi_ddiv+0xa0>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	00f6      	lsls	r6, r6, #3
 8000460:	041b      	lsls	r3, r3, #16
 8000462:	431e      	orrs	r6, r3
 8000464:	4a92      	ldr	r2, [pc, #584]	; (80006b0 <__aeabi_ddiv+0x280>)
 8000466:	0f7b      	lsrs	r3, r7, #29
 8000468:	4333      	orrs	r3, r6
 800046a:	4699      	mov	r9, r3
 800046c:	4694      	mov	ip, r2
 800046e:	0003      	movs	r3, r0
 8000470:	4463      	add	r3, ip
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2300      	movs	r3, #0
 8000476:	2600      	movs	r6, #0
 8000478:	00ff      	lsls	r7, r7, #3
 800047a:	9302      	str	r3, [sp, #8]
 800047c:	0323      	lsls	r3, r4, #12
 800047e:	0b1b      	lsrs	r3, r3, #12
 8000480:	4698      	mov	r8, r3
 8000482:	0063      	lsls	r3, r4, #1
 8000484:	0fe4      	lsrs	r4, r4, #31
 8000486:	4652      	mov	r2, sl
 8000488:	0d5b      	lsrs	r3, r3, #21
 800048a:	9401      	str	r4, [sp, #4]
 800048c:	d100      	bne.n	8000490 <__aeabi_ddiv+0x60>
 800048e:	e0b3      	b.n	80005f8 <__aeabi_ddiv+0x1c8>
 8000490:	4986      	ldr	r1, [pc, #536]	; (80006ac <__aeabi_ddiv+0x27c>)
 8000492:	428b      	cmp	r3, r1
 8000494:	d100      	bne.n	8000498 <__aeabi_ddiv+0x68>
 8000496:	e09e      	b.n	80005d6 <__aeabi_ddiv+0x1a6>
 8000498:	4642      	mov	r2, r8
 800049a:	00d1      	lsls	r1, r2, #3
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	0412      	lsls	r2, r2, #16
 80004a0:	430a      	orrs	r2, r1
 80004a2:	4651      	mov	r1, sl
 80004a4:	0f49      	lsrs	r1, r1, #29
 80004a6:	4311      	orrs	r1, r2
 80004a8:	468b      	mov	fp, r1
 80004aa:	4981      	ldr	r1, [pc, #516]	; (80006b0 <__aeabi_ddiv+0x280>)
 80004ac:	4652      	mov	r2, sl
 80004ae:	468c      	mov	ip, r1
 80004b0:	9900      	ldr	r1, [sp, #0]
 80004b2:	4463      	add	r3, ip
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	00d2      	lsls	r2, r2, #3
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	002b      	movs	r3, r5
 80004be:	4063      	eors	r3, r4
 80004c0:	469a      	mov	sl, r3
 80004c2:	2e0f      	cmp	r6, #15
 80004c4:	d900      	bls.n	80004c8 <__aeabi_ddiv+0x98>
 80004c6:	e105      	b.n	80006d4 <__aeabi_ddiv+0x2a4>
 80004c8:	4b7a      	ldr	r3, [pc, #488]	; (80006b4 <__aeabi_ddiv+0x284>)
 80004ca:	00b6      	lsls	r6, r6, #2
 80004cc:	599b      	ldr	r3, [r3, r6]
 80004ce:	469f      	mov	pc, r3
 80004d0:	465b      	mov	r3, fp
 80004d2:	4333      	orrs	r3, r6
 80004d4:	4699      	mov	r9, r3
 80004d6:	d000      	beq.n	80004da <__aeabi_ddiv+0xaa>
 80004d8:	e0b8      	b.n	800064c <__aeabi_ddiv+0x21c>
 80004da:	2302      	movs	r3, #2
 80004dc:	2608      	movs	r6, #8
 80004de:	2700      	movs	r7, #0
 80004e0:	9000      	str	r0, [sp, #0]
 80004e2:	9302      	str	r3, [sp, #8]
 80004e4:	e7ca      	b.n	800047c <__aeabi_ddiv+0x4c>
 80004e6:	46cb      	mov	fp, r9
 80004e8:	003a      	movs	r2, r7
 80004ea:	9902      	ldr	r1, [sp, #8]
 80004ec:	9501      	str	r5, [sp, #4]
 80004ee:	9b01      	ldr	r3, [sp, #4]
 80004f0:	469a      	mov	sl, r3
 80004f2:	2902      	cmp	r1, #2
 80004f4:	d027      	beq.n	8000546 <__aeabi_ddiv+0x116>
 80004f6:	2903      	cmp	r1, #3
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0xcc>
 80004fa:	e280      	b.n	80009fe <__aeabi_ddiv+0x5ce>
 80004fc:	2901      	cmp	r1, #1
 80004fe:	d044      	beq.n	800058a <__aeabi_ddiv+0x15a>
 8000500:	496d      	ldr	r1, [pc, #436]	; (80006b8 <__aeabi_ddiv+0x288>)
 8000502:	9b00      	ldr	r3, [sp, #0]
 8000504:	468c      	mov	ip, r1
 8000506:	4463      	add	r3, ip
 8000508:	001c      	movs	r4, r3
 800050a:	2c00      	cmp	r4, #0
 800050c:	dd38      	ble.n	8000580 <__aeabi_ddiv+0x150>
 800050e:	0753      	lsls	r3, r2, #29
 8000510:	d000      	beq.n	8000514 <__aeabi_ddiv+0xe4>
 8000512:	e213      	b.n	800093c <__aeabi_ddiv+0x50c>
 8000514:	08d2      	lsrs	r2, r2, #3
 8000516:	465b      	mov	r3, fp
 8000518:	01db      	lsls	r3, r3, #7
 800051a:	d509      	bpl.n	8000530 <__aeabi_ddiv+0x100>
 800051c:	4659      	mov	r1, fp
 800051e:	4b67      	ldr	r3, [pc, #412]	; (80006bc <__aeabi_ddiv+0x28c>)
 8000520:	4019      	ands	r1, r3
 8000522:	468b      	mov	fp, r1
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	00c9      	lsls	r1, r1, #3
 8000528:	468c      	mov	ip, r1
 800052a:	9b00      	ldr	r3, [sp, #0]
 800052c:	4463      	add	r3, ip
 800052e:	001c      	movs	r4, r3
 8000530:	4b63      	ldr	r3, [pc, #396]	; (80006c0 <__aeabi_ddiv+0x290>)
 8000532:	429c      	cmp	r4, r3
 8000534:	dc07      	bgt.n	8000546 <__aeabi_ddiv+0x116>
 8000536:	465b      	mov	r3, fp
 8000538:	0564      	lsls	r4, r4, #21
 800053a:	075f      	lsls	r7, r3, #29
 800053c:	025b      	lsls	r3, r3, #9
 800053e:	4317      	orrs	r7, r2
 8000540:	0b1b      	lsrs	r3, r3, #12
 8000542:	0d62      	lsrs	r2, r4, #21
 8000544:	e002      	b.n	800054c <__aeabi_ddiv+0x11c>
 8000546:	2300      	movs	r3, #0
 8000548:	2700      	movs	r7, #0
 800054a:	4a58      	ldr	r2, [pc, #352]	; (80006ac <__aeabi_ddiv+0x27c>)
 800054c:	2100      	movs	r1, #0
 800054e:	031b      	lsls	r3, r3, #12
 8000550:	0b1c      	lsrs	r4, r3, #12
 8000552:	0d0b      	lsrs	r3, r1, #20
 8000554:	051b      	lsls	r3, r3, #20
 8000556:	4323      	orrs	r3, r4
 8000558:	0514      	lsls	r4, r2, #20
 800055a:	4a5a      	ldr	r2, [pc, #360]	; (80006c4 <__aeabi_ddiv+0x294>)
 800055c:	0038      	movs	r0, r7
 800055e:	4013      	ands	r3, r2
 8000560:	431c      	orrs	r4, r3
 8000562:	4653      	mov	r3, sl
 8000564:	0064      	lsls	r4, r4, #1
 8000566:	07db      	lsls	r3, r3, #31
 8000568:	0864      	lsrs	r4, r4, #1
 800056a:	431c      	orrs	r4, r3
 800056c:	0021      	movs	r1, r4
 800056e:	b005      	add	sp, #20
 8000570:	bc3c      	pop	{r2, r3, r4, r5}
 8000572:	4690      	mov	r8, r2
 8000574:	4699      	mov	r9, r3
 8000576:	46a2      	mov	sl, r4
 8000578:	46ab      	mov	fp, r5
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	2201      	movs	r2, #1
 800057e:	4252      	negs	r2, r2
 8000580:	2301      	movs	r3, #1
 8000582:	1b1b      	subs	r3, r3, r4
 8000584:	2b38      	cmp	r3, #56	; 0x38
 8000586:	dc00      	bgt.n	800058a <__aeabi_ddiv+0x15a>
 8000588:	e1ad      	b.n	80008e6 <__aeabi_ddiv+0x4b6>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	2700      	movs	r7, #0
 8000590:	e7dc      	b.n	800054c <__aeabi_ddiv+0x11c>
 8000592:	465b      	mov	r3, fp
 8000594:	4333      	orrs	r3, r6
 8000596:	4699      	mov	r9, r3
 8000598:	d05e      	beq.n	8000658 <__aeabi_ddiv+0x228>
 800059a:	2e00      	cmp	r6, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_ddiv+0x170>
 800059e:	e18a      	b.n	80008b6 <__aeabi_ddiv+0x486>
 80005a0:	0030      	movs	r0, r6
 80005a2:	f000 fe35 	bl	8001210 <__clzsi2>
 80005a6:	0003      	movs	r3, r0
 80005a8:	3b0b      	subs	r3, #11
 80005aa:	2b1c      	cmp	r3, #28
 80005ac:	dd00      	ble.n	80005b0 <__aeabi_ddiv+0x180>
 80005ae:	e17b      	b.n	80008a8 <__aeabi_ddiv+0x478>
 80005b0:	221d      	movs	r2, #29
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	465a      	mov	r2, fp
 80005b6:	0001      	movs	r1, r0
 80005b8:	40da      	lsrs	r2, r3
 80005ba:	3908      	subs	r1, #8
 80005bc:	408e      	lsls	r6, r1
 80005be:	0013      	movs	r3, r2
 80005c0:	465f      	mov	r7, fp
 80005c2:	4333      	orrs	r3, r6
 80005c4:	4699      	mov	r9, r3
 80005c6:	408f      	lsls	r7, r1
 80005c8:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <__aeabi_ddiv+0x298>)
 80005ca:	2600      	movs	r6, #0
 80005cc:	1a1b      	subs	r3, r3, r0
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	e752      	b.n	800047c <__aeabi_ddiv+0x4c>
 80005d6:	4641      	mov	r1, r8
 80005d8:	4653      	mov	r3, sl
 80005da:	430b      	orrs	r3, r1
 80005dc:	493b      	ldr	r1, [pc, #236]	; (80006cc <__aeabi_ddiv+0x29c>)
 80005de:	469b      	mov	fp, r3
 80005e0:	468c      	mov	ip, r1
 80005e2:	9b00      	ldr	r3, [sp, #0]
 80005e4:	4463      	add	r3, ip
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	465b      	mov	r3, fp
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d13b      	bne.n	8000666 <__aeabi_ddiv+0x236>
 80005ee:	2302      	movs	r3, #2
 80005f0:	2200      	movs	r2, #0
 80005f2:	431e      	orrs	r6, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	e761      	b.n	80004bc <__aeabi_ddiv+0x8c>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4313      	orrs	r3, r2
 80005fc:	469b      	mov	fp, r3
 80005fe:	d037      	beq.n	8000670 <__aeabi_ddiv+0x240>
 8000600:	4643      	mov	r3, r8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1d8>
 8000606:	e162      	b.n	80008ce <__aeabi_ddiv+0x49e>
 8000608:	4640      	mov	r0, r8
 800060a:	f000 fe01 	bl	8001210 <__clzsi2>
 800060e:	0003      	movs	r3, r0
 8000610:	3b0b      	subs	r3, #11
 8000612:	2b1c      	cmp	r3, #28
 8000614:	dd00      	ble.n	8000618 <__aeabi_ddiv+0x1e8>
 8000616:	e153      	b.n	80008c0 <__aeabi_ddiv+0x490>
 8000618:	0002      	movs	r2, r0
 800061a:	4641      	mov	r1, r8
 800061c:	3a08      	subs	r2, #8
 800061e:	4091      	lsls	r1, r2
 8000620:	4688      	mov	r8, r1
 8000622:	211d      	movs	r1, #29
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	4651      	mov	r1, sl
 8000628:	40d9      	lsrs	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	4641      	mov	r1, r8
 800062e:	430b      	orrs	r3, r1
 8000630:	469b      	mov	fp, r3
 8000632:	4653      	mov	r3, sl
 8000634:	4093      	lsls	r3, r2
 8000636:	001a      	movs	r2, r3
 8000638:	9b00      	ldr	r3, [sp, #0]
 800063a:	4925      	ldr	r1, [pc, #148]	; (80006d0 <__aeabi_ddiv+0x2a0>)
 800063c:	469c      	mov	ip, r3
 800063e:	4460      	add	r0, ip
 8000640:	0003      	movs	r3, r0
 8000642:	468c      	mov	ip, r1
 8000644:	4463      	add	r3, ip
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2100      	movs	r1, #0
 800064a:	e737      	b.n	80004bc <__aeabi_ddiv+0x8c>
 800064c:	2303      	movs	r3, #3
 800064e:	46b1      	mov	r9, r6
 8000650:	9000      	str	r0, [sp, #0]
 8000652:	260c      	movs	r6, #12
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	e711      	b.n	800047c <__aeabi_ddiv+0x4c>
 8000658:	2300      	movs	r3, #0
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	2604      	movs	r6, #4
 8000660:	2700      	movs	r7, #0
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	e70a      	b.n	800047c <__aeabi_ddiv+0x4c>
 8000666:	2303      	movs	r3, #3
 8000668:	46c3      	mov	fp, r8
 800066a:	431e      	orrs	r6, r3
 800066c:	2103      	movs	r1, #3
 800066e:	e725      	b.n	80004bc <__aeabi_ddiv+0x8c>
 8000670:	3301      	adds	r3, #1
 8000672:	431e      	orrs	r6, r3
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	e720      	b.n	80004bc <__aeabi_ddiv+0x8c>
 800067a:	2300      	movs	r3, #0
 800067c:	469a      	mov	sl, r3
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	2700      	movs	r7, #0
 8000682:	031b      	lsls	r3, r3, #12
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <__aeabi_ddiv+0x27c>)
 8000686:	e761      	b.n	800054c <__aeabi_ddiv+0x11c>
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	4649      	mov	r1, r9
 800068c:	031b      	lsls	r3, r3, #12
 800068e:	4219      	tst	r1, r3
 8000690:	d100      	bne.n	8000694 <__aeabi_ddiv+0x264>
 8000692:	e0e2      	b.n	800085a <__aeabi_ddiv+0x42a>
 8000694:	4659      	mov	r1, fp
 8000696:	4219      	tst	r1, r3
 8000698:	d000      	beq.n	800069c <__aeabi_ddiv+0x26c>
 800069a:	e0de      	b.n	800085a <__aeabi_ddiv+0x42a>
 800069c:	430b      	orrs	r3, r1
 800069e:	031b      	lsls	r3, r3, #12
 80006a0:	0017      	movs	r7, r2
 80006a2:	0b1b      	lsrs	r3, r3, #12
 80006a4:	46a2      	mov	sl, r4
 80006a6:	4a01      	ldr	r2, [pc, #4]	; (80006ac <__aeabi_ddiv+0x27c>)
 80006a8:	e750      	b.n	800054c <__aeabi_ddiv+0x11c>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	000007ff 	.word	0x000007ff
 80006b0:	fffffc01 	.word	0xfffffc01
 80006b4:	08003484 	.word	0x08003484
 80006b8:	000003ff 	.word	0x000003ff
 80006bc:	feffffff 	.word	0xfeffffff
 80006c0:	000007fe 	.word	0x000007fe
 80006c4:	800fffff 	.word	0x800fffff
 80006c8:	fffffc0d 	.word	0xfffffc0d
 80006cc:	fffff801 	.word	0xfffff801
 80006d0:	000003f3 	.word	0x000003f3
 80006d4:	45d9      	cmp	r9, fp
 80006d6:	d900      	bls.n	80006da <__aeabi_ddiv+0x2aa>
 80006d8:	e0cb      	b.n	8000872 <__aeabi_ddiv+0x442>
 80006da:	d100      	bne.n	80006de <__aeabi_ddiv+0x2ae>
 80006dc:	e0c6      	b.n	800086c <__aeabi_ddiv+0x43c>
 80006de:	003c      	movs	r4, r7
 80006e0:	4648      	mov	r0, r9
 80006e2:	2700      	movs	r7, #0
 80006e4:	9b00      	ldr	r3, [sp, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	465b      	mov	r3, fp
 80006ec:	0e16      	lsrs	r6, r2, #24
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	431e      	orrs	r6, r3
 80006f2:	0213      	lsls	r3, r2, #8
 80006f4:	4698      	mov	r8, r3
 80006f6:	0433      	lsls	r3, r6, #16
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	4699      	mov	r9, r3
 80006fc:	0c31      	lsrs	r1, r6, #16
 80006fe:	9101      	str	r1, [sp, #4]
 8000700:	f7ff fd88 	bl	8000214 <__aeabi_uidivmod>
 8000704:	464a      	mov	r2, r9
 8000706:	4342      	muls	r2, r0
 8000708:	040b      	lsls	r3, r1, #16
 800070a:	0c21      	lsrs	r1, r4, #16
 800070c:	0005      	movs	r5, r0
 800070e:	4319      	orrs	r1, r3
 8000710:	428a      	cmp	r2, r1
 8000712:	d907      	bls.n	8000724 <__aeabi_ddiv+0x2f4>
 8000714:	1989      	adds	r1, r1, r6
 8000716:	3d01      	subs	r5, #1
 8000718:	428e      	cmp	r6, r1
 800071a:	d803      	bhi.n	8000724 <__aeabi_ddiv+0x2f4>
 800071c:	428a      	cmp	r2, r1
 800071e:	d901      	bls.n	8000724 <__aeabi_ddiv+0x2f4>
 8000720:	1e85      	subs	r5, r0, #2
 8000722:	1989      	adds	r1, r1, r6
 8000724:	1a88      	subs	r0, r1, r2
 8000726:	9901      	ldr	r1, [sp, #4]
 8000728:	f7ff fd74 	bl	8000214 <__aeabi_uidivmod>
 800072c:	0409      	lsls	r1, r1, #16
 800072e:	468c      	mov	ip, r1
 8000730:	464a      	mov	r2, r9
 8000732:	0421      	lsls	r1, r4, #16
 8000734:	4664      	mov	r4, ip
 8000736:	4342      	muls	r2, r0
 8000738:	0c09      	lsrs	r1, r1, #16
 800073a:	0003      	movs	r3, r0
 800073c:	4321      	orrs	r1, r4
 800073e:	428a      	cmp	r2, r1
 8000740:	d904      	bls.n	800074c <__aeabi_ddiv+0x31c>
 8000742:	1989      	adds	r1, r1, r6
 8000744:	3b01      	subs	r3, #1
 8000746:	428e      	cmp	r6, r1
 8000748:	d800      	bhi.n	800074c <__aeabi_ddiv+0x31c>
 800074a:	e0f1      	b.n	8000930 <__aeabi_ddiv+0x500>
 800074c:	042d      	lsls	r5, r5, #16
 800074e:	431d      	orrs	r5, r3
 8000750:	46ab      	mov	fp, r5
 8000752:	4643      	mov	r3, r8
 8000754:	1a89      	subs	r1, r1, r2
 8000756:	4642      	mov	r2, r8
 8000758:	0c28      	lsrs	r0, r5, #16
 800075a:	0412      	lsls	r2, r2, #16
 800075c:	0c1d      	lsrs	r5, r3, #16
 800075e:	465b      	mov	r3, fp
 8000760:	0c14      	lsrs	r4, r2, #16
 8000762:	0022      	movs	r2, r4
 8000764:	041b      	lsls	r3, r3, #16
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	435a      	muls	r2, r3
 800076a:	9403      	str	r4, [sp, #12]
 800076c:	436b      	muls	r3, r5
 800076e:	4344      	muls	r4, r0
 8000770:	9502      	str	r5, [sp, #8]
 8000772:	4368      	muls	r0, r5
 8000774:	191b      	adds	r3, r3, r4
 8000776:	0c15      	lsrs	r5, r2, #16
 8000778:	18eb      	adds	r3, r5, r3
 800077a:	429c      	cmp	r4, r3
 800077c:	d903      	bls.n	8000786 <__aeabi_ddiv+0x356>
 800077e:	2480      	movs	r4, #128	; 0x80
 8000780:	0264      	lsls	r4, r4, #9
 8000782:	46a4      	mov	ip, r4
 8000784:	4460      	add	r0, ip
 8000786:	0c1c      	lsrs	r4, r3, #16
 8000788:	0415      	lsls	r5, r2, #16
 800078a:	041b      	lsls	r3, r3, #16
 800078c:	0c2d      	lsrs	r5, r5, #16
 800078e:	1820      	adds	r0, r4, r0
 8000790:	195d      	adds	r5, r3, r5
 8000792:	4281      	cmp	r1, r0
 8000794:	d377      	bcc.n	8000886 <__aeabi_ddiv+0x456>
 8000796:	d073      	beq.n	8000880 <__aeabi_ddiv+0x450>
 8000798:	1a0c      	subs	r4, r1, r0
 800079a:	4aa2      	ldr	r2, [pc, #648]	; (8000a24 <__aeabi_ddiv+0x5f4>)
 800079c:	1b7d      	subs	r5, r7, r5
 800079e:	42af      	cmp	r7, r5
 80007a0:	41bf      	sbcs	r7, r7
 80007a2:	4694      	mov	ip, r2
 80007a4:	9b00      	ldr	r3, [sp, #0]
 80007a6:	427f      	negs	r7, r7
 80007a8:	4463      	add	r3, ip
 80007aa:	1be0      	subs	r0, r4, r7
 80007ac:	001c      	movs	r4, r3
 80007ae:	4286      	cmp	r6, r0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_ddiv+0x384>
 80007b2:	e0db      	b.n	800096c <__aeabi_ddiv+0x53c>
 80007b4:	9901      	ldr	r1, [sp, #4]
 80007b6:	f7ff fd2d 	bl	8000214 <__aeabi_uidivmod>
 80007ba:	464a      	mov	r2, r9
 80007bc:	4342      	muls	r2, r0
 80007be:	040b      	lsls	r3, r1, #16
 80007c0:	0c29      	lsrs	r1, r5, #16
 80007c2:	0007      	movs	r7, r0
 80007c4:	4319      	orrs	r1, r3
 80007c6:	428a      	cmp	r2, r1
 80007c8:	d907      	bls.n	80007da <__aeabi_ddiv+0x3aa>
 80007ca:	1989      	adds	r1, r1, r6
 80007cc:	3f01      	subs	r7, #1
 80007ce:	428e      	cmp	r6, r1
 80007d0:	d803      	bhi.n	80007da <__aeabi_ddiv+0x3aa>
 80007d2:	428a      	cmp	r2, r1
 80007d4:	d901      	bls.n	80007da <__aeabi_ddiv+0x3aa>
 80007d6:	1e87      	subs	r7, r0, #2
 80007d8:	1989      	adds	r1, r1, r6
 80007da:	1a88      	subs	r0, r1, r2
 80007dc:	9901      	ldr	r1, [sp, #4]
 80007de:	f7ff fd19 	bl	8000214 <__aeabi_uidivmod>
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	464a      	mov	r2, r9
 80007e6:	4689      	mov	r9, r1
 80007e8:	0429      	lsls	r1, r5, #16
 80007ea:	464d      	mov	r5, r9
 80007ec:	4342      	muls	r2, r0
 80007ee:	0c09      	lsrs	r1, r1, #16
 80007f0:	0003      	movs	r3, r0
 80007f2:	4329      	orrs	r1, r5
 80007f4:	428a      	cmp	r2, r1
 80007f6:	d907      	bls.n	8000808 <__aeabi_ddiv+0x3d8>
 80007f8:	1989      	adds	r1, r1, r6
 80007fa:	3b01      	subs	r3, #1
 80007fc:	428e      	cmp	r6, r1
 80007fe:	d803      	bhi.n	8000808 <__aeabi_ddiv+0x3d8>
 8000800:	428a      	cmp	r2, r1
 8000802:	d901      	bls.n	8000808 <__aeabi_ddiv+0x3d8>
 8000804:	1e83      	subs	r3, r0, #2
 8000806:	1989      	adds	r1, r1, r6
 8000808:	043f      	lsls	r7, r7, #16
 800080a:	1a89      	subs	r1, r1, r2
 800080c:	003a      	movs	r2, r7
 800080e:	9f03      	ldr	r7, [sp, #12]
 8000810:	431a      	orrs	r2, r3
 8000812:	0038      	movs	r0, r7
 8000814:	0413      	lsls	r3, r2, #16
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	4358      	muls	r0, r3
 800081a:	4681      	mov	r9, r0
 800081c:	9802      	ldr	r0, [sp, #8]
 800081e:	0c15      	lsrs	r5, r2, #16
 8000820:	436f      	muls	r7, r5
 8000822:	4343      	muls	r3, r0
 8000824:	4345      	muls	r5, r0
 8000826:	4648      	mov	r0, r9
 8000828:	0c00      	lsrs	r0, r0, #16
 800082a:	4684      	mov	ip, r0
 800082c:	19db      	adds	r3, r3, r7
 800082e:	4463      	add	r3, ip
 8000830:	429f      	cmp	r7, r3
 8000832:	d903      	bls.n	800083c <__aeabi_ddiv+0x40c>
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	0240      	lsls	r0, r0, #9
 8000838:	4684      	mov	ip, r0
 800083a:	4465      	add	r5, ip
 800083c:	4648      	mov	r0, r9
 800083e:	0c1f      	lsrs	r7, r3, #16
 8000840:	0400      	lsls	r0, r0, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c00      	lsrs	r0, r0, #16
 8000846:	197d      	adds	r5, r7, r5
 8000848:	1818      	adds	r0, r3, r0
 800084a:	42a9      	cmp	r1, r5
 800084c:	d200      	bcs.n	8000850 <__aeabi_ddiv+0x420>
 800084e:	e084      	b.n	800095a <__aeabi_ddiv+0x52a>
 8000850:	d100      	bne.n	8000854 <__aeabi_ddiv+0x424>
 8000852:	e07f      	b.n	8000954 <__aeabi_ddiv+0x524>
 8000854:	2301      	movs	r3, #1
 8000856:	431a      	orrs	r2, r3
 8000858:	e657      	b.n	800050a <__aeabi_ddiv+0xda>
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	464a      	mov	r2, r9
 800085e:	031b      	lsls	r3, r3, #12
 8000860:	4313      	orrs	r3, r2
 8000862:	031b      	lsls	r3, r3, #12
 8000864:	0b1b      	lsrs	r3, r3, #12
 8000866:	46aa      	mov	sl, r5
 8000868:	4a6f      	ldr	r2, [pc, #444]	; (8000a28 <__aeabi_ddiv+0x5f8>)
 800086a:	e66f      	b.n	800054c <__aeabi_ddiv+0x11c>
 800086c:	42ba      	cmp	r2, r7
 800086e:	d900      	bls.n	8000872 <__aeabi_ddiv+0x442>
 8000870:	e735      	b.n	80006de <__aeabi_ddiv+0x2ae>
 8000872:	464b      	mov	r3, r9
 8000874:	07dc      	lsls	r4, r3, #31
 8000876:	0858      	lsrs	r0, r3, #1
 8000878:	087b      	lsrs	r3, r7, #1
 800087a:	431c      	orrs	r4, r3
 800087c:	07ff      	lsls	r7, r7, #31
 800087e:	e734      	b.n	80006ea <__aeabi_ddiv+0x2ba>
 8000880:	2400      	movs	r4, #0
 8000882:	42af      	cmp	r7, r5
 8000884:	d289      	bcs.n	800079a <__aeabi_ddiv+0x36a>
 8000886:	4447      	add	r7, r8
 8000888:	4547      	cmp	r7, r8
 800088a:	41a4      	sbcs	r4, r4
 800088c:	465b      	mov	r3, fp
 800088e:	4264      	negs	r4, r4
 8000890:	19a4      	adds	r4, r4, r6
 8000892:	1864      	adds	r4, r4, r1
 8000894:	3b01      	subs	r3, #1
 8000896:	42a6      	cmp	r6, r4
 8000898:	d21e      	bcs.n	80008d8 <__aeabi_ddiv+0x4a8>
 800089a:	42a0      	cmp	r0, r4
 800089c:	d86d      	bhi.n	800097a <__aeabi_ddiv+0x54a>
 800089e:	d100      	bne.n	80008a2 <__aeabi_ddiv+0x472>
 80008a0:	e0b6      	b.n	8000a10 <__aeabi_ddiv+0x5e0>
 80008a2:	1a24      	subs	r4, r4, r0
 80008a4:	469b      	mov	fp, r3
 80008a6:	e778      	b.n	800079a <__aeabi_ddiv+0x36a>
 80008a8:	0003      	movs	r3, r0
 80008aa:	465a      	mov	r2, fp
 80008ac:	3b28      	subs	r3, #40	; 0x28
 80008ae:	409a      	lsls	r2, r3
 80008b0:	2700      	movs	r7, #0
 80008b2:	4691      	mov	r9, r2
 80008b4:	e688      	b.n	80005c8 <__aeabi_ddiv+0x198>
 80008b6:	4658      	mov	r0, fp
 80008b8:	f000 fcaa 	bl	8001210 <__clzsi2>
 80008bc:	3020      	adds	r0, #32
 80008be:	e672      	b.n	80005a6 <__aeabi_ddiv+0x176>
 80008c0:	0003      	movs	r3, r0
 80008c2:	4652      	mov	r2, sl
 80008c4:	3b28      	subs	r3, #40	; 0x28
 80008c6:	409a      	lsls	r2, r3
 80008c8:	4693      	mov	fp, r2
 80008ca:	2200      	movs	r2, #0
 80008cc:	e6b4      	b.n	8000638 <__aeabi_ddiv+0x208>
 80008ce:	4650      	mov	r0, sl
 80008d0:	f000 fc9e 	bl	8001210 <__clzsi2>
 80008d4:	3020      	adds	r0, #32
 80008d6:	e69a      	b.n	800060e <__aeabi_ddiv+0x1de>
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d1e2      	bne.n	80008a2 <__aeabi_ddiv+0x472>
 80008dc:	45b8      	cmp	r8, r7
 80008de:	d9dc      	bls.n	800089a <__aeabi_ddiv+0x46a>
 80008e0:	1a34      	subs	r4, r6, r0
 80008e2:	469b      	mov	fp, r3
 80008e4:	e759      	b.n	800079a <__aeabi_ddiv+0x36a>
 80008e6:	2b1f      	cmp	r3, #31
 80008e8:	dc65      	bgt.n	80009b6 <__aeabi_ddiv+0x586>
 80008ea:	4c50      	ldr	r4, [pc, #320]	; (8000a2c <__aeabi_ddiv+0x5fc>)
 80008ec:	9900      	ldr	r1, [sp, #0]
 80008ee:	46a4      	mov	ip, r4
 80008f0:	465c      	mov	r4, fp
 80008f2:	4461      	add	r1, ip
 80008f4:	0008      	movs	r0, r1
 80008f6:	408c      	lsls	r4, r1
 80008f8:	0011      	movs	r1, r2
 80008fa:	4082      	lsls	r2, r0
 80008fc:	40d9      	lsrs	r1, r3
 80008fe:	1e50      	subs	r0, r2, #1
 8000900:	4182      	sbcs	r2, r0
 8000902:	430c      	orrs	r4, r1
 8000904:	4314      	orrs	r4, r2
 8000906:	465a      	mov	r2, fp
 8000908:	40da      	lsrs	r2, r3
 800090a:	0013      	movs	r3, r2
 800090c:	0762      	lsls	r2, r4, #29
 800090e:	d009      	beq.n	8000924 <__aeabi_ddiv+0x4f4>
 8000910:	220f      	movs	r2, #15
 8000912:	4022      	ands	r2, r4
 8000914:	2a04      	cmp	r2, #4
 8000916:	d005      	beq.n	8000924 <__aeabi_ddiv+0x4f4>
 8000918:	0022      	movs	r2, r4
 800091a:	1d14      	adds	r4, r2, #4
 800091c:	4294      	cmp	r4, r2
 800091e:	4189      	sbcs	r1, r1
 8000920:	4249      	negs	r1, r1
 8000922:	185b      	adds	r3, r3, r1
 8000924:	021a      	lsls	r2, r3, #8
 8000926:	d562      	bpl.n	80009ee <__aeabi_ddiv+0x5be>
 8000928:	2201      	movs	r2, #1
 800092a:	2300      	movs	r3, #0
 800092c:	2700      	movs	r7, #0
 800092e:	e60d      	b.n	800054c <__aeabi_ddiv+0x11c>
 8000930:	428a      	cmp	r2, r1
 8000932:	d800      	bhi.n	8000936 <__aeabi_ddiv+0x506>
 8000934:	e70a      	b.n	800074c <__aeabi_ddiv+0x31c>
 8000936:	1e83      	subs	r3, r0, #2
 8000938:	1989      	adds	r1, r1, r6
 800093a:	e707      	b.n	800074c <__aeabi_ddiv+0x31c>
 800093c:	230f      	movs	r3, #15
 800093e:	4013      	ands	r3, r2
 8000940:	2b04      	cmp	r3, #4
 8000942:	d100      	bne.n	8000946 <__aeabi_ddiv+0x516>
 8000944:	e5e6      	b.n	8000514 <__aeabi_ddiv+0xe4>
 8000946:	1d17      	adds	r7, r2, #4
 8000948:	4297      	cmp	r7, r2
 800094a:	4192      	sbcs	r2, r2
 800094c:	4253      	negs	r3, r2
 800094e:	449b      	add	fp, r3
 8000950:	08fa      	lsrs	r2, r7, #3
 8000952:	e5e0      	b.n	8000516 <__aeabi_ddiv+0xe6>
 8000954:	2800      	cmp	r0, #0
 8000956:	d100      	bne.n	800095a <__aeabi_ddiv+0x52a>
 8000958:	e5d7      	b.n	800050a <__aeabi_ddiv+0xda>
 800095a:	1871      	adds	r1, r6, r1
 800095c:	1e53      	subs	r3, r2, #1
 800095e:	42b1      	cmp	r1, r6
 8000960:	d327      	bcc.n	80009b2 <__aeabi_ddiv+0x582>
 8000962:	42a9      	cmp	r1, r5
 8000964:	d315      	bcc.n	8000992 <__aeabi_ddiv+0x562>
 8000966:	d058      	beq.n	8000a1a <__aeabi_ddiv+0x5ea>
 8000968:	001a      	movs	r2, r3
 800096a:	e773      	b.n	8000854 <__aeabi_ddiv+0x424>
 800096c:	2b00      	cmp	r3, #0
 800096e:	dc00      	bgt.n	8000972 <__aeabi_ddiv+0x542>
 8000970:	e604      	b.n	800057c <__aeabi_ddiv+0x14c>
 8000972:	2301      	movs	r3, #1
 8000974:	2200      	movs	r2, #0
 8000976:	449b      	add	fp, r3
 8000978:	e5cd      	b.n	8000516 <__aeabi_ddiv+0xe6>
 800097a:	2302      	movs	r3, #2
 800097c:	4447      	add	r7, r8
 800097e:	4547      	cmp	r7, r8
 8000980:	4189      	sbcs	r1, r1
 8000982:	425b      	negs	r3, r3
 8000984:	469c      	mov	ip, r3
 8000986:	4249      	negs	r1, r1
 8000988:	1989      	adds	r1, r1, r6
 800098a:	190c      	adds	r4, r1, r4
 800098c:	44e3      	add	fp, ip
 800098e:	1a24      	subs	r4, r4, r0
 8000990:	e703      	b.n	800079a <__aeabi_ddiv+0x36a>
 8000992:	4643      	mov	r3, r8
 8000994:	005f      	lsls	r7, r3, #1
 8000996:	4547      	cmp	r7, r8
 8000998:	419b      	sbcs	r3, r3
 800099a:	46b8      	mov	r8, r7
 800099c:	425b      	negs	r3, r3
 800099e:	199e      	adds	r6, r3, r6
 80009a0:	3a02      	subs	r2, #2
 80009a2:	1989      	adds	r1, r1, r6
 80009a4:	42a9      	cmp	r1, r5
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x57a>
 80009a8:	e754      	b.n	8000854 <__aeabi_ddiv+0x424>
 80009aa:	4540      	cmp	r0, r8
 80009ac:	d000      	beq.n	80009b0 <__aeabi_ddiv+0x580>
 80009ae:	e751      	b.n	8000854 <__aeabi_ddiv+0x424>
 80009b0:	e5ab      	b.n	800050a <__aeabi_ddiv+0xda>
 80009b2:	001a      	movs	r2, r3
 80009b4:	e7f6      	b.n	80009a4 <__aeabi_ddiv+0x574>
 80009b6:	211f      	movs	r1, #31
 80009b8:	465f      	mov	r7, fp
 80009ba:	4249      	negs	r1, r1
 80009bc:	1b0c      	subs	r4, r1, r4
 80009be:	40e7      	lsrs	r7, r4
 80009c0:	2b20      	cmp	r3, #32
 80009c2:	d007      	beq.n	80009d4 <__aeabi_ddiv+0x5a4>
 80009c4:	491a      	ldr	r1, [pc, #104]	; (8000a30 <__aeabi_ddiv+0x600>)
 80009c6:	9b00      	ldr	r3, [sp, #0]
 80009c8:	468c      	mov	ip, r1
 80009ca:	4463      	add	r3, ip
 80009cc:	0018      	movs	r0, r3
 80009ce:	465b      	mov	r3, fp
 80009d0:	4083      	lsls	r3, r0
 80009d2:	431a      	orrs	r2, r3
 80009d4:	1e50      	subs	r0, r2, #1
 80009d6:	4182      	sbcs	r2, r0
 80009d8:	433a      	orrs	r2, r7
 80009da:	2707      	movs	r7, #7
 80009dc:	2300      	movs	r3, #0
 80009de:	4017      	ands	r7, r2
 80009e0:	d009      	beq.n	80009f6 <__aeabi_ddiv+0x5c6>
 80009e2:	210f      	movs	r1, #15
 80009e4:	2300      	movs	r3, #0
 80009e6:	4011      	ands	r1, r2
 80009e8:	0014      	movs	r4, r2
 80009ea:	2904      	cmp	r1, #4
 80009ec:	d195      	bne.n	800091a <__aeabi_ddiv+0x4ea>
 80009ee:	0022      	movs	r2, r4
 80009f0:	075f      	lsls	r7, r3, #29
 80009f2:	025b      	lsls	r3, r3, #9
 80009f4:	0b1b      	lsrs	r3, r3, #12
 80009f6:	08d2      	lsrs	r2, r2, #3
 80009f8:	4317      	orrs	r7, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	e5a6      	b.n	800054c <__aeabi_ddiv+0x11c>
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	4659      	mov	r1, fp
 8000a02:	031b      	lsls	r3, r3, #12
 8000a04:	430b      	orrs	r3, r1
 8000a06:	031b      	lsls	r3, r3, #12
 8000a08:	0017      	movs	r7, r2
 8000a0a:	0b1b      	lsrs	r3, r3, #12
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <__aeabi_ddiv+0x5f8>)
 8000a0e:	e59d      	b.n	800054c <__aeabi_ddiv+0x11c>
 8000a10:	42bd      	cmp	r5, r7
 8000a12:	d8b2      	bhi.n	800097a <__aeabi_ddiv+0x54a>
 8000a14:	469b      	mov	fp, r3
 8000a16:	2400      	movs	r4, #0
 8000a18:	e6bf      	b.n	800079a <__aeabi_ddiv+0x36a>
 8000a1a:	4580      	cmp	r8, r0
 8000a1c:	d3b9      	bcc.n	8000992 <__aeabi_ddiv+0x562>
 8000a1e:	001a      	movs	r2, r3
 8000a20:	e7c3      	b.n	80009aa <__aeabi_ddiv+0x57a>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	000003ff 	.word	0x000003ff
 8000a28:	000007ff 	.word	0x000007ff
 8000a2c:	0000041e 	.word	0x0000041e
 8000a30:	0000043e 	.word	0x0000043e

08000a34 <__aeabi_dsub>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	4657      	mov	r7, sl
 8000a38:	464e      	mov	r6, r9
 8000a3a:	4645      	mov	r5, r8
 8000a3c:	46de      	mov	lr, fp
 8000a3e:	000c      	movs	r4, r1
 8000a40:	0309      	lsls	r1, r1, #12
 8000a42:	b5e0      	push	{r5, r6, r7, lr}
 8000a44:	0a49      	lsrs	r1, r1, #9
 8000a46:	0f46      	lsrs	r6, r0, #29
 8000a48:	005f      	lsls	r7, r3, #1
 8000a4a:	4331      	orrs	r1, r6
 8000a4c:	031e      	lsls	r6, r3, #12
 8000a4e:	0fdb      	lsrs	r3, r3, #31
 8000a50:	0a76      	lsrs	r6, r6, #9
 8000a52:	469b      	mov	fp, r3
 8000a54:	0f53      	lsrs	r3, r2, #29
 8000a56:	4333      	orrs	r3, r6
 8000a58:	4ec8      	ldr	r6, [pc, #800]	; (8000d7c <__aeabi_dsub+0x348>)
 8000a5a:	0065      	lsls	r5, r4, #1
 8000a5c:	00c0      	lsls	r0, r0, #3
 8000a5e:	0fe4      	lsrs	r4, r4, #31
 8000a60:	00d2      	lsls	r2, r2, #3
 8000a62:	0d6d      	lsrs	r5, r5, #21
 8000a64:	46a2      	mov	sl, r4
 8000a66:	4681      	mov	r9, r0
 8000a68:	0d7f      	lsrs	r7, r7, #21
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	4690      	mov	r8, r2
 8000a6e:	42b7      	cmp	r7, r6
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dsub+0x40>
 8000a72:	e0b9      	b.n	8000be8 <__aeabi_dsub+0x1b4>
 8000a74:	465b      	mov	r3, fp
 8000a76:	2601      	movs	r6, #1
 8000a78:	4073      	eors	r3, r6
 8000a7a:	469b      	mov	fp, r3
 8000a7c:	1bee      	subs	r6, r5, r7
 8000a7e:	45a3      	cmp	fp, r4
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dsub+0x50>
 8000a82:	e083      	b.n	8000b8c <__aeabi_dsub+0x158>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	dd63      	ble.n	8000b50 <__aeabi_dsub+0x11c>
 8000a88:	2f00      	cmp	r7, #0
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_dsub+0x5a>
 8000a8c:	e0b1      	b.n	8000bf2 <__aeabi_dsub+0x1be>
 8000a8e:	4663      	mov	r3, ip
 8000a90:	4313      	orrs	r3, r2
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dsub+0x62>
 8000a94:	e123      	b.n	8000cde <__aeabi_dsub+0x2aa>
 8000a96:	1e73      	subs	r3, r6, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dsub+0x6a>
 8000a9c:	e1ba      	b.n	8000e14 <__aeabi_dsub+0x3e0>
 8000a9e:	1a86      	subs	r6, r0, r2
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	42b0      	cmp	r0, r6
 8000aa4:	4180      	sbcs	r0, r0
 8000aa6:	2501      	movs	r5, #1
 8000aa8:	1ac9      	subs	r1, r1, r3
 8000aaa:	4240      	negs	r0, r0
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	020b      	lsls	r3, r1, #8
 8000ab0:	d400      	bmi.n	8000ab4 <__aeabi_dsub+0x80>
 8000ab2:	e147      	b.n	8000d44 <__aeabi_dsub+0x310>
 8000ab4:	0249      	lsls	r1, r1, #9
 8000ab6:	0a4b      	lsrs	r3, r1, #9
 8000ab8:	4698      	mov	r8, r3
 8000aba:	4643      	mov	r3, r8
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dsub+0x8e>
 8000ac0:	e189      	b.n	8000dd6 <__aeabi_dsub+0x3a2>
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	f000 fba4 	bl	8001210 <__clzsi2>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	3b08      	subs	r3, #8
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	dd00      	ble.n	8000ad2 <__aeabi_dsub+0x9e>
 8000ad0:	e17c      	b.n	8000dcc <__aeabi_dsub+0x398>
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	4641      	mov	r1, r8
 8000ada:	40d0      	lsrs	r0, r2
 8000adc:	4099      	lsls	r1, r3
 8000ade:	0002      	movs	r2, r0
 8000ae0:	409e      	lsls	r6, r3
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dsub+0xb6>
 8000ae8:	e16a      	b.n	8000dc0 <__aeabi_dsub+0x38c>
 8000aea:	1b5d      	subs	r5, r3, r5
 8000aec:	1c6b      	adds	r3, r5, #1
 8000aee:	2b1f      	cmp	r3, #31
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_dsub+0xc0>
 8000af2:	e194      	b.n	8000e1e <__aeabi_dsub+0x3ea>
 8000af4:	2120      	movs	r1, #32
 8000af6:	0010      	movs	r0, r2
 8000af8:	0035      	movs	r5, r6
 8000afa:	1ac9      	subs	r1, r1, r3
 8000afc:	408e      	lsls	r6, r1
 8000afe:	40da      	lsrs	r2, r3
 8000b00:	4088      	lsls	r0, r1
 8000b02:	40dd      	lsrs	r5, r3
 8000b04:	1e71      	subs	r1, r6, #1
 8000b06:	418e      	sbcs	r6, r1
 8000b08:	0011      	movs	r1, r2
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	4328      	orrs	r0, r5
 8000b0e:	2500      	movs	r5, #0
 8000b10:	4306      	orrs	r6, r0
 8000b12:	4032      	ands	r2, r6
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d009      	beq.n	8000b2c <__aeabi_dsub+0xf8>
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4033      	ands	r3, r6
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d005      	beq.n	8000b2c <__aeabi_dsub+0xf8>
 8000b20:	1d33      	adds	r3, r6, #4
 8000b22:	42b3      	cmp	r3, r6
 8000b24:	41b6      	sbcs	r6, r6
 8000b26:	4276      	negs	r6, r6
 8000b28:	1989      	adds	r1, r1, r6
 8000b2a:	001e      	movs	r6, r3
 8000b2c:	020b      	lsls	r3, r1, #8
 8000b2e:	d400      	bmi.n	8000b32 <__aeabi_dsub+0xfe>
 8000b30:	e23d      	b.n	8000fae <__aeabi_dsub+0x57a>
 8000b32:	1c6a      	adds	r2, r5, #1
 8000b34:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <__aeabi_dsub+0x348>)
 8000b36:	0555      	lsls	r5, r2, #21
 8000b38:	0d6d      	lsrs	r5, r5, #21
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dsub+0x10c>
 8000b3e:	e119      	b.n	8000d74 <__aeabi_dsub+0x340>
 8000b40:	4a8f      	ldr	r2, [pc, #572]	; (8000d80 <__aeabi_dsub+0x34c>)
 8000b42:	08f6      	lsrs	r6, r6, #3
 8000b44:	400a      	ands	r2, r1
 8000b46:	0757      	lsls	r7, r2, #29
 8000b48:	0252      	lsls	r2, r2, #9
 8000b4a:	4337      	orrs	r7, r6
 8000b4c:	0b12      	lsrs	r2, r2, #12
 8000b4e:	e09b      	b.n	8000c88 <__aeabi_dsub+0x254>
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d000      	beq.n	8000b56 <__aeabi_dsub+0x122>
 8000b54:	e0c5      	b.n	8000ce2 <__aeabi_dsub+0x2ae>
 8000b56:	1c6e      	adds	r6, r5, #1
 8000b58:	0576      	lsls	r6, r6, #21
 8000b5a:	0d76      	lsrs	r6, r6, #21
 8000b5c:	2e01      	cmp	r6, #1
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_dsub+0x12e>
 8000b60:	e148      	b.n	8000df4 <__aeabi_dsub+0x3c0>
 8000b62:	4667      	mov	r7, ip
 8000b64:	1a86      	subs	r6, r0, r2
 8000b66:	1bcb      	subs	r3, r1, r7
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	41bf      	sbcs	r7, r7
 8000b6c:	427f      	negs	r7, r7
 8000b6e:	46b8      	mov	r8, r7
 8000b70:	001f      	movs	r7, r3
 8000b72:	4643      	mov	r3, r8
 8000b74:	1aff      	subs	r7, r7, r3
 8000b76:	003b      	movs	r3, r7
 8000b78:	46b8      	mov	r8, r7
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	d500      	bpl.n	8000b80 <__aeabi_dsub+0x14c>
 8000b7e:	e15f      	b.n	8000e40 <__aeabi_dsub+0x40c>
 8000b80:	4337      	orrs	r7, r6
 8000b82:	d19a      	bne.n	8000aba <__aeabi_dsub+0x86>
 8000b84:	2200      	movs	r2, #0
 8000b86:	2400      	movs	r4, #0
 8000b88:	2500      	movs	r5, #0
 8000b8a:	e079      	b.n	8000c80 <__aeabi_dsub+0x24c>
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_dsub+0x15e>
 8000b90:	e0fa      	b.n	8000d88 <__aeabi_dsub+0x354>
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dsub+0x164>
 8000b96:	e08d      	b.n	8000cb4 <__aeabi_dsub+0x280>
 8000b98:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <__aeabi_dsub+0x348>)
 8000b9a:	429d      	cmp	r5, r3
 8000b9c:	d067      	beq.n	8000c6e <__aeabi_dsub+0x23a>
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	4667      	mov	r7, ip
 8000ba2:	041b      	lsls	r3, r3, #16
 8000ba4:	431f      	orrs	r7, r3
 8000ba6:	46bc      	mov	ip, r7
 8000ba8:	2e38      	cmp	r6, #56	; 0x38
 8000baa:	dc00      	bgt.n	8000bae <__aeabi_dsub+0x17a>
 8000bac:	e152      	b.n	8000e54 <__aeabi_dsub+0x420>
 8000bae:	4663      	mov	r3, ip
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	4193      	sbcs	r3, r2
 8000bb6:	181e      	adds	r6, r3, r0
 8000bb8:	4286      	cmp	r6, r0
 8000bba:	4180      	sbcs	r0, r0
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	1809      	adds	r1, r1, r0
 8000bc0:	020b      	lsls	r3, r1, #8
 8000bc2:	d400      	bmi.n	8000bc6 <__aeabi_dsub+0x192>
 8000bc4:	e0be      	b.n	8000d44 <__aeabi_dsub+0x310>
 8000bc6:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <__aeabi_dsub+0x348>)
 8000bc8:	3501      	adds	r5, #1
 8000bca:	429d      	cmp	r5, r3
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x19c>
 8000bce:	e0d2      	b.n	8000d76 <__aeabi_dsub+0x342>
 8000bd0:	4a6b      	ldr	r2, [pc, #428]	; (8000d80 <__aeabi_dsub+0x34c>)
 8000bd2:	0873      	lsrs	r3, r6, #1
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	400e      	ands	r6, r1
 8000bda:	431e      	orrs	r6, r3
 8000bdc:	0851      	lsrs	r1, r2, #1
 8000bde:	07d3      	lsls	r3, r2, #31
 8000be0:	2207      	movs	r2, #7
 8000be2:	431e      	orrs	r6, r3
 8000be4:	4032      	ands	r2, r6
 8000be6:	e795      	b.n	8000b14 <__aeabi_dsub+0xe0>
 8000be8:	001e      	movs	r6, r3
 8000bea:	4316      	orrs	r6, r2
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dsub+0x1bc>
 8000bee:	e745      	b.n	8000a7c <__aeabi_dsub+0x48>
 8000bf0:	e740      	b.n	8000a74 <__aeabi_dsub+0x40>
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <__aeabi_dsub+0x348>)
 8000bf4:	429d      	cmp	r5, r3
 8000bf6:	d03a      	beq.n	8000c6e <__aeabi_dsub+0x23a>
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	4667      	mov	r7, ip
 8000bfc:	041b      	lsls	r3, r3, #16
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	46bc      	mov	ip, r7
 8000c02:	2e38      	cmp	r6, #56	; 0x38
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_dsub+0x1d4>
 8000c06:	e0eb      	b.n	8000de0 <__aeabi_dsub+0x3ac>
 8000c08:	2e1f      	cmp	r6, #31
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_dsub+0x1da>
 8000c0c:	e13a      	b.n	8000e84 <__aeabi_dsub+0x450>
 8000c0e:	0033      	movs	r3, r6
 8000c10:	4667      	mov	r7, ip
 8000c12:	3b20      	subs	r3, #32
 8000c14:	40df      	lsrs	r7, r3
 8000c16:	003b      	movs	r3, r7
 8000c18:	2e20      	cmp	r6, #32
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dsub+0x1f4>
 8000c1c:	2740      	movs	r7, #64	; 0x40
 8000c1e:	1bbf      	subs	r7, r7, r6
 8000c20:	4666      	mov	r6, ip
 8000c22:	40be      	lsls	r6, r7
 8000c24:	4332      	orrs	r2, r6
 8000c26:	4690      	mov	r8, r2
 8000c28:	4646      	mov	r6, r8
 8000c2a:	1e72      	subs	r2, r6, #1
 8000c2c:	4196      	sbcs	r6, r2
 8000c2e:	4333      	orrs	r3, r6
 8000c30:	e0da      	b.n	8000de8 <__aeabi_dsub+0x3b4>
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dsub+0x204>
 8000c36:	e214      	b.n	8001062 <__aeabi_dsub+0x62e>
 8000c38:	4663      	mov	r3, ip
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dsub+0x20c>
 8000c3e:	e168      	b.n	8000f12 <__aeabi_dsub+0x4de>
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	074e      	lsls	r6, r1, #29
 8000c44:	08c0      	lsrs	r0, r0, #3
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	031b      	lsls	r3, r3, #12
 8000c4a:	4306      	orrs	r6, r0
 8000c4c:	4219      	tst	r1, r3
 8000c4e:	d008      	beq.n	8000c62 <__aeabi_dsub+0x22e>
 8000c50:	4660      	mov	r0, ip
 8000c52:	08c0      	lsrs	r0, r0, #3
 8000c54:	4218      	tst	r0, r3
 8000c56:	d104      	bne.n	8000c62 <__aeabi_dsub+0x22e>
 8000c58:	4663      	mov	r3, ip
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	08d2      	lsrs	r2, r2, #3
 8000c5e:	075e      	lsls	r6, r3, #29
 8000c60:	4316      	orrs	r6, r2
 8000c62:	00f3      	lsls	r3, r6, #3
 8000c64:	4699      	mov	r9, r3
 8000c66:	00c9      	lsls	r1, r1, #3
 8000c68:	0f72      	lsrs	r2, r6, #29
 8000c6a:	4d44      	ldr	r5, [pc, #272]	; (8000d7c <__aeabi_dsub+0x348>)
 8000c6c:	4311      	orrs	r1, r2
 8000c6e:	464b      	mov	r3, r9
 8000c70:	08de      	lsrs	r6, r3, #3
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <__aeabi_dsub+0x348>)
 8000c74:	074f      	lsls	r7, r1, #29
 8000c76:	4337      	orrs	r7, r6
 8000c78:	08ca      	lsrs	r2, r1, #3
 8000c7a:	429d      	cmp	r5, r3
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dsub+0x24c>
 8000c7e:	e06e      	b.n	8000d5e <__aeabi_dsub+0x32a>
 8000c80:	0312      	lsls	r2, r2, #12
 8000c82:	056d      	lsls	r5, r5, #21
 8000c84:	0b12      	lsrs	r2, r2, #12
 8000c86:	0d6d      	lsrs	r5, r5, #21
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0312      	lsls	r2, r2, #12
 8000c8c:	0b13      	lsrs	r3, r2, #12
 8000c8e:	0d0a      	lsrs	r2, r1, #20
 8000c90:	0512      	lsls	r2, r2, #20
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <__aeabi_dsub+0x350>)
 8000c96:	052d      	lsls	r5, r5, #20
 8000c98:	4013      	ands	r3, r2
 8000c9a:	432b      	orrs	r3, r5
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	07e4      	lsls	r4, r4, #31
 8000ca0:	085b      	lsrs	r3, r3, #1
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	0038      	movs	r0, r7
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	bc3c      	pop	{r2, r3, r4, r5}
 8000caa:	4690      	mov	r8, r2
 8000cac:	4699      	mov	r9, r3
 8000cae:	46a2      	mov	sl, r4
 8000cb0:	46ab      	mov	fp, r5
 8000cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	d011      	beq.n	8000cde <__aeabi_dsub+0x2aa>
 8000cba:	1e73      	subs	r3, r6, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_dsub+0x28e>
 8000cc0:	e107      	b.n	8000ed2 <__aeabi_dsub+0x49e>
 8000cc2:	1886      	adds	r6, r0, r2
 8000cc4:	4286      	cmp	r6, r0
 8000cc6:	4180      	sbcs	r0, r0
 8000cc8:	4461      	add	r1, ip
 8000cca:	4240      	negs	r0, r0
 8000ccc:	1809      	adds	r1, r1, r0
 8000cce:	2501      	movs	r5, #1
 8000cd0:	020b      	lsls	r3, r1, #8
 8000cd2:	d537      	bpl.n	8000d44 <__aeabi_dsub+0x310>
 8000cd4:	2502      	movs	r5, #2
 8000cd6:	e77b      	b.n	8000bd0 <__aeabi_dsub+0x19c>
 8000cd8:	003e      	movs	r6, r7
 8000cda:	4661      	mov	r1, ip
 8000cdc:	4691      	mov	r9, r2
 8000cde:	0035      	movs	r5, r6
 8000ce0:	e7c5      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000ce2:	465c      	mov	r4, fp
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d000      	beq.n	8000cea <__aeabi_dsub+0x2b6>
 8000ce8:	e0e1      	b.n	8000eae <__aeabi_dsub+0x47a>
 8000cea:	000b      	movs	r3, r1
 8000cec:	4303      	orrs	r3, r0
 8000cee:	d0f3      	beq.n	8000cd8 <__aeabi_dsub+0x2a4>
 8000cf0:	1c73      	adds	r3, r6, #1
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dsub+0x2c2>
 8000cf4:	e1ac      	b.n	8001050 <__aeabi_dsub+0x61c>
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <__aeabi_dsub+0x348>)
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dsub+0x2ca>
 8000cfc:	e13a      	b.n	8000f74 <__aeabi_dsub+0x540>
 8000cfe:	43f3      	mvns	r3, r6
 8000d00:	2b38      	cmp	r3, #56	; 0x38
 8000d02:	dd00      	ble.n	8000d06 <__aeabi_dsub+0x2d2>
 8000d04:	e16f      	b.n	8000fe6 <__aeabi_dsub+0x5b2>
 8000d06:	2b1f      	cmp	r3, #31
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_dsub+0x2d8>
 8000d0a:	e18c      	b.n	8001026 <__aeabi_dsub+0x5f2>
 8000d0c:	2520      	movs	r5, #32
 8000d0e:	000e      	movs	r6, r1
 8000d10:	1aed      	subs	r5, r5, r3
 8000d12:	40ae      	lsls	r6, r5
 8000d14:	46b0      	mov	r8, r6
 8000d16:	0006      	movs	r6, r0
 8000d18:	46aa      	mov	sl, r5
 8000d1a:	40de      	lsrs	r6, r3
 8000d1c:	4645      	mov	r5, r8
 8000d1e:	4335      	orrs	r5, r6
 8000d20:	002e      	movs	r6, r5
 8000d22:	4655      	mov	r5, sl
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	40a8      	lsls	r0, r5
 8000d28:	4663      	mov	r3, ip
 8000d2a:	1e45      	subs	r5, r0, #1
 8000d2c:	41a8      	sbcs	r0, r5
 8000d2e:	1a5b      	subs	r3, r3, r1
 8000d30:	469c      	mov	ip, r3
 8000d32:	4330      	orrs	r0, r6
 8000d34:	1a16      	subs	r6, r2, r0
 8000d36:	42b2      	cmp	r2, r6
 8000d38:	4192      	sbcs	r2, r2
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	1a99      	subs	r1, r3, r2
 8000d40:	003d      	movs	r5, r7
 8000d42:	e6b4      	b.n	8000aae <__aeabi_dsub+0x7a>
 8000d44:	2207      	movs	r2, #7
 8000d46:	4032      	ands	r2, r6
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dsub+0x31a>
 8000d4c:	e6e4      	b.n	8000b18 <__aeabi_dsub+0xe4>
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <__aeabi_dsub+0x348>)
 8000d50:	08f6      	lsrs	r6, r6, #3
 8000d52:	074f      	lsls	r7, r1, #29
 8000d54:	4337      	orrs	r7, r6
 8000d56:	08ca      	lsrs	r2, r1, #3
 8000d58:	429d      	cmp	r5, r3
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_dsub+0x32a>
 8000d5c:	e790      	b.n	8000c80 <__aeabi_dsub+0x24c>
 8000d5e:	003b      	movs	r3, r7
 8000d60:	4313      	orrs	r3, r2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dsub+0x332>
 8000d64:	e1a6      	b.n	80010b4 <__aeabi_dsub+0x680>
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	031b      	lsls	r3, r3, #12
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	0312      	lsls	r2, r2, #12
 8000d6e:	0b12      	lsrs	r2, r2, #12
 8000d70:	4d02      	ldr	r5, [pc, #8]	; (8000d7c <__aeabi_dsub+0x348>)
 8000d72:	e789      	b.n	8000c88 <__aeabi_dsub+0x254>
 8000d74:	0015      	movs	r5, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e785      	b.n	8000c88 <__aeabi_dsub+0x254>
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff
 8000d84:	800fffff 	.word	0x800fffff
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dsub+0x35a>
 8000d8c:	e0c7      	b.n	8000f1e <__aeabi_dsub+0x4ea>
 8000d8e:	1c6b      	adds	r3, r5, #1
 8000d90:	055e      	lsls	r6, r3, #21
 8000d92:	0d76      	lsrs	r6, r6, #21
 8000d94:	2e01      	cmp	r6, #1
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_dsub+0x366>
 8000d98:	e0f0      	b.n	8000f7c <__aeabi_dsub+0x548>
 8000d9a:	4dc8      	ldr	r5, [pc, #800]	; (80010bc <__aeabi_dsub+0x688>)
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0x36e>
 8000da0:	e0b9      	b.n	8000f16 <__aeabi_dsub+0x4e2>
 8000da2:	1885      	adds	r5, r0, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	4285      	cmp	r5, r0
 8000da8:	4189      	sbcs	r1, r1
 8000daa:	4462      	add	r2, ip
 8000dac:	4249      	negs	r1, r1
 8000dae:	1851      	adds	r1, r2, r1
 8000db0:	2207      	movs	r2, #7
 8000db2:	07ce      	lsls	r6, r1, #31
 8000db4:	086d      	lsrs	r5, r5, #1
 8000db6:	432e      	orrs	r6, r5
 8000db8:	0849      	lsrs	r1, r1, #1
 8000dba:	4032      	ands	r2, r6
 8000dbc:	001d      	movs	r5, r3
 8000dbe:	e6a9      	b.n	8000b14 <__aeabi_dsub+0xe0>
 8000dc0:	49bf      	ldr	r1, [pc, #764]	; (80010c0 <__aeabi_dsub+0x68c>)
 8000dc2:	1aed      	subs	r5, r5, r3
 8000dc4:	4011      	ands	r1, r2
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	4032      	ands	r2, r6
 8000dca:	e6a3      	b.n	8000b14 <__aeabi_dsub+0xe0>
 8000dcc:	0032      	movs	r2, r6
 8000dce:	3828      	subs	r0, #40	; 0x28
 8000dd0:	4082      	lsls	r2, r0
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	e686      	b.n	8000ae4 <__aeabi_dsub+0xb0>
 8000dd6:	0030      	movs	r0, r6
 8000dd8:	f000 fa1a 	bl	8001210 <__clzsi2>
 8000ddc:	3020      	adds	r0, #32
 8000dde:	e673      	b.n	8000ac8 <__aeabi_dsub+0x94>
 8000de0:	4663      	mov	r3, ip
 8000de2:	4313      	orrs	r3, r2
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	4193      	sbcs	r3, r2
 8000de8:	1ac6      	subs	r6, r0, r3
 8000dea:	42b0      	cmp	r0, r6
 8000dec:	4180      	sbcs	r0, r0
 8000dee:	4240      	negs	r0, r0
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	e65c      	b.n	8000aae <__aeabi_dsub+0x7a>
 8000df4:	000e      	movs	r6, r1
 8000df6:	4667      	mov	r7, ip
 8000df8:	4306      	orrs	r6, r0
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d15e      	bne.n	8000ebe <__aeabi_dsub+0x48a>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dsub+0x3d2>
 8000e04:	e0f3      	b.n	8000fee <__aeabi_dsub+0x5ba>
 8000e06:	2f00      	cmp	r7, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dsub+0x3d8>
 8000e0a:	e11e      	b.n	800104a <__aeabi_dsub+0x616>
 8000e0c:	465c      	mov	r4, fp
 8000e0e:	4661      	mov	r1, ip
 8000e10:	4691      	mov	r9, r2
 8000e12:	e72c      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000e14:	4fa9      	ldr	r7, [pc, #676]	; (80010bc <__aeabi_dsub+0x688>)
 8000e16:	42be      	cmp	r6, r7
 8000e18:	d07b      	beq.n	8000f12 <__aeabi_dsub+0x4de>
 8000e1a:	001e      	movs	r6, r3
 8000e1c:	e6f1      	b.n	8000c02 <__aeabi_dsub+0x1ce>
 8000e1e:	0010      	movs	r0, r2
 8000e20:	3d1f      	subs	r5, #31
 8000e22:	40e8      	lsrs	r0, r5
 8000e24:	2b20      	cmp	r3, #32
 8000e26:	d003      	beq.n	8000e30 <__aeabi_dsub+0x3fc>
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	4316      	orrs	r6, r2
 8000e30:	1e73      	subs	r3, r6, #1
 8000e32:	419e      	sbcs	r6, r3
 8000e34:	2207      	movs	r2, #7
 8000e36:	4306      	orrs	r6, r0
 8000e38:	4032      	ands	r2, r6
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	e783      	b.n	8000d48 <__aeabi_dsub+0x314>
 8000e40:	1a16      	subs	r6, r2, r0
 8000e42:	4663      	mov	r3, ip
 8000e44:	42b2      	cmp	r2, r6
 8000e46:	4180      	sbcs	r0, r0
 8000e48:	1a59      	subs	r1, r3, r1
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	1a0b      	subs	r3, r1, r0
 8000e4e:	4698      	mov	r8, r3
 8000e50:	465c      	mov	r4, fp
 8000e52:	e632      	b.n	8000aba <__aeabi_dsub+0x86>
 8000e54:	2e1f      	cmp	r6, #31
 8000e56:	dd00      	ble.n	8000e5a <__aeabi_dsub+0x426>
 8000e58:	e0ab      	b.n	8000fb2 <__aeabi_dsub+0x57e>
 8000e5a:	2720      	movs	r7, #32
 8000e5c:	1bbb      	subs	r3, r7, r6
 8000e5e:	469a      	mov	sl, r3
 8000e60:	4663      	mov	r3, ip
 8000e62:	4657      	mov	r7, sl
 8000e64:	40bb      	lsls	r3, r7
 8000e66:	4699      	mov	r9, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	464f      	mov	r7, r9
 8000e6c:	40f3      	lsrs	r3, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	003b      	movs	r3, r7
 8000e72:	4657      	mov	r7, sl
 8000e74:	40ba      	lsls	r2, r7
 8000e76:	1e57      	subs	r7, r2, #1
 8000e78:	41ba      	sbcs	r2, r7
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	40f2      	lsrs	r2, r6
 8000e80:	1889      	adds	r1, r1, r2
 8000e82:	e698      	b.n	8000bb6 <__aeabi_dsub+0x182>
 8000e84:	2720      	movs	r7, #32
 8000e86:	1bbb      	subs	r3, r7, r6
 8000e88:	469a      	mov	sl, r3
 8000e8a:	4663      	mov	r3, ip
 8000e8c:	4657      	mov	r7, sl
 8000e8e:	40bb      	lsls	r3, r7
 8000e90:	4699      	mov	r9, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	464f      	mov	r7, r9
 8000e96:	40f3      	lsrs	r3, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	4657      	mov	r7, sl
 8000e9e:	40ba      	lsls	r2, r7
 8000ea0:	1e57      	subs	r7, r2, #1
 8000ea2:	41ba      	sbcs	r2, r7
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	4662      	mov	r2, ip
 8000ea8:	40f2      	lsrs	r2, r6
 8000eaa:	1a89      	subs	r1, r1, r2
 8000eac:	e79c      	b.n	8000de8 <__aeabi_dsub+0x3b4>
 8000eae:	4b83      	ldr	r3, [pc, #524]	; (80010bc <__aeabi_dsub+0x688>)
 8000eb0:	429f      	cmp	r7, r3
 8000eb2:	d05f      	beq.n	8000f74 <__aeabi_dsub+0x540>
 8000eb4:	2580      	movs	r5, #128	; 0x80
 8000eb6:	042d      	lsls	r5, r5, #16
 8000eb8:	4273      	negs	r3, r6
 8000eba:	4329      	orrs	r1, r5
 8000ebc:	e720      	b.n	8000d00 <__aeabi_dsub+0x2cc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	d10c      	bne.n	8000edc <__aeabi_dsub+0x4a8>
 8000ec2:	2f00      	cmp	r7, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dsub+0x494>
 8000ec6:	e0d0      	b.n	800106a <__aeabi_dsub+0x636>
 8000ec8:	465c      	mov	r4, fp
 8000eca:	4661      	mov	r1, ip
 8000ecc:	4691      	mov	r9, r2
 8000ece:	4d7b      	ldr	r5, [pc, #492]	; (80010bc <__aeabi_dsub+0x688>)
 8000ed0:	e6cd      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000ed2:	4f7a      	ldr	r7, [pc, #488]	; (80010bc <__aeabi_dsub+0x688>)
 8000ed4:	42be      	cmp	r6, r7
 8000ed6:	d01c      	beq.n	8000f12 <__aeabi_dsub+0x4de>
 8000ed8:	001e      	movs	r6, r3
 8000eda:	e665      	b.n	8000ba8 <__aeabi_dsub+0x174>
 8000edc:	2f00      	cmp	r7, #0
 8000ede:	d018      	beq.n	8000f12 <__aeabi_dsub+0x4de>
 8000ee0:	08c0      	lsrs	r0, r0, #3
 8000ee2:	074e      	lsls	r6, r1, #29
 8000ee4:	4306      	orrs	r6, r0
 8000ee6:	2080      	movs	r0, #128	; 0x80
 8000ee8:	08c9      	lsrs	r1, r1, #3
 8000eea:	0300      	lsls	r0, r0, #12
 8000eec:	4201      	tst	r1, r0
 8000eee:	d008      	beq.n	8000f02 <__aeabi_dsub+0x4ce>
 8000ef0:	4663      	mov	r3, ip
 8000ef2:	08dc      	lsrs	r4, r3, #3
 8000ef4:	4204      	tst	r4, r0
 8000ef6:	d104      	bne.n	8000f02 <__aeabi_dsub+0x4ce>
 8000ef8:	0021      	movs	r1, r4
 8000efa:	46da      	mov	sl, fp
 8000efc:	08d2      	lsrs	r2, r2, #3
 8000efe:	075e      	lsls	r6, r3, #29
 8000f00:	4316      	orrs	r6, r2
 8000f02:	00f3      	lsls	r3, r6, #3
 8000f04:	4699      	mov	r9, r3
 8000f06:	2401      	movs	r4, #1
 8000f08:	4653      	mov	r3, sl
 8000f0a:	00c9      	lsls	r1, r1, #3
 8000f0c:	0f72      	lsrs	r2, r6, #29
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	401c      	ands	r4, r3
 8000f12:	4d6a      	ldr	r5, [pc, #424]	; (80010bc <__aeabi_dsub+0x688>)
 8000f14:	e6ab      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000f16:	001d      	movs	r5, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2700      	movs	r7, #0
 8000f1c:	e6b4      	b.n	8000c88 <__aeabi_dsub+0x254>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d159      	bne.n	8000fd6 <__aeabi_dsub+0x5a2>
 8000f22:	000b      	movs	r3, r1
 8000f24:	4303      	orrs	r3, r0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dsub+0x4f6>
 8000f28:	e6d6      	b.n	8000cd8 <__aeabi_dsub+0x2a4>
 8000f2a:	1c73      	adds	r3, r6, #1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dsub+0x4fc>
 8000f2e:	e0b2      	b.n	8001096 <__aeabi_dsub+0x662>
 8000f30:	4b62      	ldr	r3, [pc, #392]	; (80010bc <__aeabi_dsub+0x688>)
 8000f32:	429f      	cmp	r7, r3
 8000f34:	d01e      	beq.n	8000f74 <__aeabi_dsub+0x540>
 8000f36:	43f3      	mvns	r3, r6
 8000f38:	2b38      	cmp	r3, #56	; 0x38
 8000f3a:	dc6f      	bgt.n	800101c <__aeabi_dsub+0x5e8>
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	dd00      	ble.n	8000f42 <__aeabi_dsub+0x50e>
 8000f40:	e097      	b.n	8001072 <__aeabi_dsub+0x63e>
 8000f42:	2520      	movs	r5, #32
 8000f44:	000e      	movs	r6, r1
 8000f46:	1aed      	subs	r5, r5, r3
 8000f48:	40ae      	lsls	r6, r5
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	0006      	movs	r6, r0
 8000f4e:	46aa      	mov	sl, r5
 8000f50:	40de      	lsrs	r6, r3
 8000f52:	4645      	mov	r5, r8
 8000f54:	4335      	orrs	r5, r6
 8000f56:	002e      	movs	r6, r5
 8000f58:	4655      	mov	r5, sl
 8000f5a:	40a8      	lsls	r0, r5
 8000f5c:	40d9      	lsrs	r1, r3
 8000f5e:	1e45      	subs	r5, r0, #1
 8000f60:	41a8      	sbcs	r0, r5
 8000f62:	448c      	add	ip, r1
 8000f64:	4306      	orrs	r6, r0
 8000f66:	18b6      	adds	r6, r6, r2
 8000f68:	4296      	cmp	r6, r2
 8000f6a:	4192      	sbcs	r2, r2
 8000f6c:	4251      	negs	r1, r2
 8000f6e:	4461      	add	r1, ip
 8000f70:	003d      	movs	r5, r7
 8000f72:	e625      	b.n	8000bc0 <__aeabi_dsub+0x18c>
 8000f74:	003d      	movs	r5, r7
 8000f76:	4661      	mov	r1, ip
 8000f78:	4691      	mov	r9, r2
 8000f7a:	e678      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000f7c:	000b      	movs	r3, r1
 8000f7e:	4303      	orrs	r3, r0
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d000      	beq.n	8000f86 <__aeabi_dsub+0x552>
 8000f84:	e655      	b.n	8000c32 <__aeabi_dsub+0x1fe>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f5      	beq.n	8000f76 <__aeabi_dsub+0x542>
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dsub+0x55e>
 8000f90:	e66d      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000f92:	1886      	adds	r6, r0, r2
 8000f94:	4286      	cmp	r6, r0
 8000f96:	4180      	sbcs	r0, r0
 8000f98:	4461      	add	r1, ip
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	1809      	adds	r1, r1, r0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	020b      	lsls	r3, r1, #8
 8000fa2:	d400      	bmi.n	8000fa6 <__aeabi_dsub+0x572>
 8000fa4:	e6d0      	b.n	8000d48 <__aeabi_dsub+0x314>
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <__aeabi_dsub+0x68c>)
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4019      	ands	r1, r3
 8000fac:	e5b2      	b.n	8000b14 <__aeabi_dsub+0xe0>
 8000fae:	46b1      	mov	r9, r6
 8000fb0:	e65d      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000fb2:	0033      	movs	r3, r6
 8000fb4:	4667      	mov	r7, ip
 8000fb6:	3b20      	subs	r3, #32
 8000fb8:	40df      	lsrs	r7, r3
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2e20      	cmp	r6, #32
 8000fbe:	d005      	beq.n	8000fcc <__aeabi_dsub+0x598>
 8000fc0:	2740      	movs	r7, #64	; 0x40
 8000fc2:	1bbf      	subs	r7, r7, r6
 8000fc4:	4666      	mov	r6, ip
 8000fc6:	40be      	lsls	r6, r7
 8000fc8:	4332      	orrs	r2, r6
 8000fca:	4690      	mov	r8, r2
 8000fcc:	4646      	mov	r6, r8
 8000fce:	1e72      	subs	r2, r6, #1
 8000fd0:	4196      	sbcs	r6, r2
 8000fd2:	4333      	orrs	r3, r6
 8000fd4:	e5ef      	b.n	8000bb6 <__aeabi_dsub+0x182>
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <__aeabi_dsub+0x688>)
 8000fd8:	429f      	cmp	r7, r3
 8000fda:	d0cb      	beq.n	8000f74 <__aeabi_dsub+0x540>
 8000fdc:	2580      	movs	r5, #128	; 0x80
 8000fde:	042d      	lsls	r5, r5, #16
 8000fe0:	4273      	negs	r3, r6
 8000fe2:	4329      	orrs	r1, r5
 8000fe4:	e7a8      	b.n	8000f38 <__aeabi_dsub+0x504>
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	1e41      	subs	r1, r0, #1
 8000fea:	4188      	sbcs	r0, r1
 8000fec:	e6a2      	b.n	8000d34 <__aeabi_dsub+0x300>
 8000fee:	2f00      	cmp	r7, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x5c0>
 8000ff2:	e63c      	b.n	8000c6e <__aeabi_dsub+0x23a>
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	1acf      	subs	r7, r1, r3
 8000ffa:	42b0      	cmp	r0, r6
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	1afb      	subs	r3, r7, r3
 8001002:	4698      	mov	r8, r3
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	d54e      	bpl.n	80010a6 <__aeabi_dsub+0x672>
 8001008:	1a16      	subs	r6, r2, r0
 800100a:	4663      	mov	r3, ip
 800100c:	42b2      	cmp	r2, r6
 800100e:	4192      	sbcs	r2, r2
 8001010:	1a59      	subs	r1, r3, r1
 8001012:	4252      	negs	r2, r2
 8001014:	1a89      	subs	r1, r1, r2
 8001016:	465c      	mov	r4, fp
 8001018:	2200      	movs	r2, #0
 800101a:	e57b      	b.n	8000b14 <__aeabi_dsub+0xe0>
 800101c:	4301      	orrs	r1, r0
 800101e:	000e      	movs	r6, r1
 8001020:	1e71      	subs	r1, r6, #1
 8001022:	418e      	sbcs	r6, r1
 8001024:	e79f      	b.n	8000f66 <__aeabi_dsub+0x532>
 8001026:	001d      	movs	r5, r3
 8001028:	000e      	movs	r6, r1
 800102a:	3d20      	subs	r5, #32
 800102c:	40ee      	lsrs	r6, r5
 800102e:	46b0      	mov	r8, r6
 8001030:	2b20      	cmp	r3, #32
 8001032:	d004      	beq.n	800103e <__aeabi_dsub+0x60a>
 8001034:	2540      	movs	r5, #64	; 0x40
 8001036:	1aeb      	subs	r3, r5, r3
 8001038:	4099      	lsls	r1, r3
 800103a:	4308      	orrs	r0, r1
 800103c:	4681      	mov	r9, r0
 800103e:	4648      	mov	r0, r9
 8001040:	4643      	mov	r3, r8
 8001042:	1e41      	subs	r1, r0, #1
 8001044:	4188      	sbcs	r0, r1
 8001046:	4318      	orrs	r0, r3
 8001048:	e674      	b.n	8000d34 <__aeabi_dsub+0x300>
 800104a:	2200      	movs	r2, #0
 800104c:	2400      	movs	r4, #0
 800104e:	e617      	b.n	8000c80 <__aeabi_dsub+0x24c>
 8001050:	1a16      	subs	r6, r2, r0
 8001052:	4663      	mov	r3, ip
 8001054:	42b2      	cmp	r2, r6
 8001056:	4192      	sbcs	r2, r2
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	4252      	negs	r2, r2
 800105c:	1a89      	subs	r1, r1, r2
 800105e:	003d      	movs	r5, r7
 8001060:	e525      	b.n	8000aae <__aeabi_dsub+0x7a>
 8001062:	4661      	mov	r1, ip
 8001064:	4691      	mov	r9, r2
 8001066:	4d15      	ldr	r5, [pc, #84]	; (80010bc <__aeabi_dsub+0x688>)
 8001068:	e601      	b.n	8000c6e <__aeabi_dsub+0x23a>
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	2400      	movs	r4, #0
 800106e:	0312      	lsls	r2, r2, #12
 8001070:	e679      	b.n	8000d66 <__aeabi_dsub+0x332>
 8001072:	001d      	movs	r5, r3
 8001074:	000e      	movs	r6, r1
 8001076:	3d20      	subs	r5, #32
 8001078:	40ee      	lsrs	r6, r5
 800107a:	46b0      	mov	r8, r6
 800107c:	2b20      	cmp	r3, #32
 800107e:	d004      	beq.n	800108a <__aeabi_dsub+0x656>
 8001080:	2540      	movs	r5, #64	; 0x40
 8001082:	1aeb      	subs	r3, r5, r3
 8001084:	4099      	lsls	r1, r3
 8001086:	4308      	orrs	r0, r1
 8001088:	4681      	mov	r9, r0
 800108a:	464e      	mov	r6, r9
 800108c:	4643      	mov	r3, r8
 800108e:	1e71      	subs	r1, r6, #1
 8001090:	418e      	sbcs	r6, r1
 8001092:	431e      	orrs	r6, r3
 8001094:	e767      	b.n	8000f66 <__aeabi_dsub+0x532>
 8001096:	1886      	adds	r6, r0, r2
 8001098:	4296      	cmp	r6, r2
 800109a:	419b      	sbcs	r3, r3
 800109c:	4461      	add	r1, ip
 800109e:	425b      	negs	r3, r3
 80010a0:	18c9      	adds	r1, r1, r3
 80010a2:	003d      	movs	r5, r7
 80010a4:	e58c      	b.n	8000bc0 <__aeabi_dsub+0x18c>
 80010a6:	4647      	mov	r7, r8
 80010a8:	4337      	orrs	r7, r6
 80010aa:	d0ce      	beq.n	800104a <__aeabi_dsub+0x616>
 80010ac:	2207      	movs	r2, #7
 80010ae:	4641      	mov	r1, r8
 80010b0:	4032      	ands	r2, r6
 80010b2:	e649      	b.n	8000d48 <__aeabi_dsub+0x314>
 80010b4:	2700      	movs	r7, #0
 80010b6:	003a      	movs	r2, r7
 80010b8:	e5e6      	b.n	8000c88 <__aeabi_dsub+0x254>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	ff7fffff 	.word	0xff7fffff

080010c4 <__aeabi_d2iz>:
 80010c4:	b530      	push	{r4, r5, lr}
 80010c6:	4d14      	ldr	r5, [pc, #80]	; (8001118 <__aeabi_d2iz+0x54>)
 80010c8:	030a      	lsls	r2, r1, #12
 80010ca:	004b      	lsls	r3, r1, #1
 80010cc:	0b12      	lsrs	r2, r2, #12
 80010ce:	0d5b      	lsrs	r3, r3, #21
 80010d0:	0fc9      	lsrs	r1, r1, #31
 80010d2:	2400      	movs	r4, #0
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	dd11      	ble.n	80010fc <__aeabi_d2iz+0x38>
 80010d8:	4c10      	ldr	r4, [pc, #64]	; (800111c <__aeabi_d2iz+0x58>)
 80010da:	42a3      	cmp	r3, r4
 80010dc:	dc10      	bgt.n	8001100 <__aeabi_d2iz+0x3c>
 80010de:	2480      	movs	r4, #128	; 0x80
 80010e0:	0364      	lsls	r4, r4, #13
 80010e2:	4322      	orrs	r2, r4
 80010e4:	4c0e      	ldr	r4, [pc, #56]	; (8001120 <__aeabi_d2iz+0x5c>)
 80010e6:	1ae4      	subs	r4, r4, r3
 80010e8:	2c1f      	cmp	r4, #31
 80010ea:	dd0c      	ble.n	8001106 <__aeabi_d2iz+0x42>
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <__aeabi_d2iz+0x60>)
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	40da      	lsrs	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	425c      	negs	r4, r3
 80010f6:	2900      	cmp	r1, #0
 80010f8:	d100      	bne.n	80010fc <__aeabi_d2iz+0x38>
 80010fa:	001c      	movs	r4, r3
 80010fc:	0020      	movs	r0, r4
 80010fe:	bd30      	pop	{r4, r5, pc}
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <__aeabi_d2iz+0x64>)
 8001102:	18cc      	adds	r4, r1, r3
 8001104:	e7fa      	b.n	80010fc <__aeabi_d2iz+0x38>
 8001106:	4d09      	ldr	r5, [pc, #36]	; (800112c <__aeabi_d2iz+0x68>)
 8001108:	40e0      	lsrs	r0, r4
 800110a:	46ac      	mov	ip, r5
 800110c:	4463      	add	r3, ip
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	4303      	orrs	r3, r0
 8001114:	e7ee      	b.n	80010f4 <__aeabi_d2iz+0x30>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	000003fe 	.word	0x000003fe
 800111c:	0000041d 	.word	0x0000041d
 8001120:	00000433 	.word	0x00000433
 8001124:	00000413 	.word	0x00000413
 8001128:	7fffffff 	.word	0x7fffffff
 800112c:	fffffbed 	.word	0xfffffbed

08001130 <__aeabi_ui2d>:
 8001130:	b510      	push	{r4, lr}
 8001132:	1e04      	subs	r4, r0, #0
 8001134:	d025      	beq.n	8001182 <__aeabi_ui2d+0x52>
 8001136:	f000 f86b 	bl	8001210 <__clzsi2>
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <__aeabi_ui2d+0x5c>)
 800113c:	1a1b      	subs	r3, r3, r0
 800113e:	055b      	lsls	r3, r3, #21
 8001140:	0d5b      	lsrs	r3, r3, #21
 8001142:	280a      	cmp	r0, #10
 8001144:	dd12      	ble.n	800116c <__aeabi_ui2d+0x3c>
 8001146:	380b      	subs	r0, #11
 8001148:	4084      	lsls	r4, r0
 800114a:	2200      	movs	r2, #0
 800114c:	0324      	lsls	r4, r4, #12
 800114e:	0b24      	lsrs	r4, r4, #12
 8001150:	2100      	movs	r1, #0
 8001152:	0010      	movs	r0, r2
 8001154:	0324      	lsls	r4, r4, #12
 8001156:	0d0a      	lsrs	r2, r1, #20
 8001158:	0b24      	lsrs	r4, r4, #12
 800115a:	0512      	lsls	r2, r2, #20
 800115c:	4322      	orrs	r2, r4
 800115e:	4c0c      	ldr	r4, [pc, #48]	; (8001190 <__aeabi_ui2d+0x60>)
 8001160:	051b      	lsls	r3, r3, #20
 8001162:	4022      	ands	r2, r4
 8001164:	4313      	orrs	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	0859      	lsrs	r1, r3, #1
 800116a:	bd10      	pop	{r4, pc}
 800116c:	0002      	movs	r2, r0
 800116e:	0021      	movs	r1, r4
 8001170:	3215      	adds	r2, #21
 8001172:	4091      	lsls	r1, r2
 8001174:	000a      	movs	r2, r1
 8001176:	210b      	movs	r1, #11
 8001178:	1a08      	subs	r0, r1, r0
 800117a:	40c4      	lsrs	r4, r0
 800117c:	0324      	lsls	r4, r4, #12
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e7e6      	b.n	8001150 <__aeabi_ui2d+0x20>
 8001182:	2300      	movs	r3, #0
 8001184:	2400      	movs	r4, #0
 8001186:	2200      	movs	r2, #0
 8001188:	e7e2      	b.n	8001150 <__aeabi_ui2d+0x20>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	0000041e 	.word	0x0000041e
 8001190:	800fffff 	.word	0x800fffff

08001194 <__aeabi_cdrcmple>:
 8001194:	4684      	mov	ip, r0
 8001196:	1c10      	adds	r0, r2, #0
 8001198:	4662      	mov	r2, ip
 800119a:	468c      	mov	ip, r1
 800119c:	1c19      	adds	r1, r3, #0
 800119e:	4663      	mov	r3, ip
 80011a0:	e000      	b.n	80011a4 <__aeabi_cdcmpeq>
 80011a2:	46c0      	nop			; (mov r8, r8)

080011a4 <__aeabi_cdcmpeq>:
 80011a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011a6:	f000 f8f1 	bl	800138c <__ledf2>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d401      	bmi.n	80011b2 <__aeabi_cdcmpeq+0xe>
 80011ae:	2100      	movs	r1, #0
 80011b0:	42c8      	cmn	r0, r1
 80011b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080011b4 <__aeabi_dcmpeq>:
 80011b4:	b510      	push	{r4, lr}
 80011b6:	f000 f849 	bl	800124c <__eqdf2>
 80011ba:	4240      	negs	r0, r0
 80011bc:	3001      	adds	r0, #1
 80011be:	bd10      	pop	{r4, pc}

080011c0 <__aeabi_dcmplt>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	f000 f8e3 	bl	800138c <__ledf2>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	db01      	blt.n	80011ce <__aeabi_dcmplt+0xe>
 80011ca:	2000      	movs	r0, #0
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	2001      	movs	r0, #1
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)

080011d4 <__aeabi_dcmple>:
 80011d4:	b510      	push	{r4, lr}
 80011d6:	f000 f8d9 	bl	800138c <__ledf2>
 80011da:	2800      	cmp	r0, #0
 80011dc:	dd01      	ble.n	80011e2 <__aeabi_dcmple+0xe>
 80011de:	2000      	movs	r0, #0
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	2001      	movs	r0, #1
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)

080011e8 <__aeabi_dcmpgt>:
 80011e8:	b510      	push	{r4, lr}
 80011ea:	f000 f86b 	bl	80012c4 <__gedf2>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	dc01      	bgt.n	80011f6 <__aeabi_dcmpgt+0xe>
 80011f2:	2000      	movs	r0, #0
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	2001      	movs	r0, #1
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)

080011fc <__aeabi_dcmpge>:
 80011fc:	b510      	push	{r4, lr}
 80011fe:	f000 f861 	bl	80012c4 <__gedf2>
 8001202:	2800      	cmp	r0, #0
 8001204:	da01      	bge.n	800120a <__aeabi_dcmpge+0xe>
 8001206:	2000      	movs	r0, #0
 8001208:	bd10      	pop	{r4, pc}
 800120a:	2001      	movs	r0, #1
 800120c:	bd10      	pop	{r4, pc}
 800120e:	46c0      	nop			; (mov r8, r8)

08001210 <__clzsi2>:
 8001210:	211c      	movs	r1, #28
 8001212:	2301      	movs	r3, #1
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	4298      	cmp	r0, r3
 8001218:	d301      	bcc.n	800121e <__clzsi2+0xe>
 800121a:	0c00      	lsrs	r0, r0, #16
 800121c:	3910      	subs	r1, #16
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	4298      	cmp	r0, r3
 8001222:	d301      	bcc.n	8001228 <__clzsi2+0x18>
 8001224:	0a00      	lsrs	r0, r0, #8
 8001226:	3908      	subs	r1, #8
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	4298      	cmp	r0, r3
 800122c:	d301      	bcc.n	8001232 <__clzsi2+0x22>
 800122e:	0900      	lsrs	r0, r0, #4
 8001230:	3904      	subs	r1, #4
 8001232:	a202      	add	r2, pc, #8	; (adr r2, 800123c <__clzsi2+0x2c>)
 8001234:	5c10      	ldrb	r0, [r2, r0]
 8001236:	1840      	adds	r0, r0, r1
 8001238:	4770      	bx	lr
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	02020304 	.word	0x02020304
 8001240:	01010101 	.word	0x01010101
	...

0800124c <__eqdf2>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	464f      	mov	r7, r9
 8001250:	4646      	mov	r6, r8
 8001252:	46d6      	mov	lr, sl
 8001254:	4684      	mov	ip, r0
 8001256:	b5c0      	push	{r6, r7, lr}
 8001258:	4680      	mov	r8, r0
 800125a:	4e19      	ldr	r6, [pc, #100]	; (80012c0 <__eqdf2+0x74>)
 800125c:	0318      	lsls	r0, r3, #12
 800125e:	030f      	lsls	r7, r1, #12
 8001260:	004d      	lsls	r5, r1, #1
 8001262:	0b00      	lsrs	r0, r0, #12
 8001264:	005c      	lsls	r4, r3, #1
 8001266:	4682      	mov	sl, r0
 8001268:	0b3f      	lsrs	r7, r7, #12
 800126a:	0d6d      	lsrs	r5, r5, #21
 800126c:	0fc9      	lsrs	r1, r1, #31
 800126e:	4691      	mov	r9, r2
 8001270:	0d64      	lsrs	r4, r4, #21
 8001272:	0fdb      	lsrs	r3, r3, #31
 8001274:	2001      	movs	r0, #1
 8001276:	42b5      	cmp	r5, r6
 8001278:	d00a      	beq.n	8001290 <__eqdf2+0x44>
 800127a:	42b4      	cmp	r4, r6
 800127c:	d003      	beq.n	8001286 <__eqdf2+0x3a>
 800127e:	42a5      	cmp	r5, r4
 8001280:	d101      	bne.n	8001286 <__eqdf2+0x3a>
 8001282:	4557      	cmp	r7, sl
 8001284:	d00c      	beq.n	80012a0 <__eqdf2+0x54>
 8001286:	bc1c      	pop	{r2, r3, r4}
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	46a2      	mov	sl, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	4666      	mov	r6, ip
 8001292:	433e      	orrs	r6, r7
 8001294:	d1f7      	bne.n	8001286 <__eqdf2+0x3a>
 8001296:	42ac      	cmp	r4, r5
 8001298:	d1f5      	bne.n	8001286 <__eqdf2+0x3a>
 800129a:	4654      	mov	r4, sl
 800129c:	4314      	orrs	r4, r2
 800129e:	d1f2      	bne.n	8001286 <__eqdf2+0x3a>
 80012a0:	2001      	movs	r0, #1
 80012a2:	45c8      	cmp	r8, r9
 80012a4:	d1ef      	bne.n	8001286 <__eqdf2+0x3a>
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d007      	beq.n	80012ba <__eqdf2+0x6e>
 80012aa:	2d00      	cmp	r5, #0
 80012ac:	d1eb      	bne.n	8001286 <__eqdf2+0x3a>
 80012ae:	4663      	mov	r3, ip
 80012b0:	431f      	orrs	r7, r3
 80012b2:	0038      	movs	r0, r7
 80012b4:	1e47      	subs	r7, r0, #1
 80012b6:	41b8      	sbcs	r0, r7
 80012b8:	e7e5      	b.n	8001286 <__eqdf2+0x3a>
 80012ba:	2000      	movs	r0, #0
 80012bc:	e7e3      	b.n	8001286 <__eqdf2+0x3a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	000007ff 	.word	0x000007ff

080012c4 <__gedf2>:
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	464f      	mov	r7, r9
 80012c8:	4646      	mov	r6, r8
 80012ca:	46d6      	mov	lr, sl
 80012cc:	004d      	lsls	r5, r1, #1
 80012ce:	b5c0      	push	{r6, r7, lr}
 80012d0:	030e      	lsls	r6, r1, #12
 80012d2:	0fc9      	lsrs	r1, r1, #31
 80012d4:	468a      	mov	sl, r1
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <__gedf2+0xc4>)
 80012d8:	031f      	lsls	r7, r3, #12
 80012da:	005c      	lsls	r4, r3, #1
 80012dc:	4680      	mov	r8, r0
 80012de:	0b36      	lsrs	r6, r6, #12
 80012e0:	0d6d      	lsrs	r5, r5, #21
 80012e2:	4691      	mov	r9, r2
 80012e4:	0b3f      	lsrs	r7, r7, #12
 80012e6:	0d64      	lsrs	r4, r4, #21
 80012e8:	0fdb      	lsrs	r3, r3, #31
 80012ea:	428d      	cmp	r5, r1
 80012ec:	d01e      	beq.n	800132c <__gedf2+0x68>
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d016      	beq.n	8001320 <__gedf2+0x5c>
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	d11e      	bne.n	8001334 <__gedf2+0x70>
 80012f6:	4330      	orrs	r0, r6
 80012f8:	4684      	mov	ip, r0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d101      	bne.n	8001302 <__gedf2+0x3e>
 80012fe:	433a      	orrs	r2, r7
 8001300:	d023      	beq.n	800134a <__gedf2+0x86>
 8001302:	4662      	mov	r2, ip
 8001304:	2a00      	cmp	r2, #0
 8001306:	d01a      	beq.n	800133e <__gedf2+0x7a>
 8001308:	459a      	cmp	sl, r3
 800130a:	d029      	beq.n	8001360 <__gedf2+0x9c>
 800130c:	4651      	mov	r1, sl
 800130e:	2002      	movs	r0, #2
 8001310:	3901      	subs	r1, #1
 8001312:	4008      	ands	r0, r1
 8001314:	3801      	subs	r0, #1
 8001316:	bc1c      	pop	{r2, r3, r4}
 8001318:	4690      	mov	r8, r2
 800131a:	4699      	mov	r9, r3
 800131c:	46a2      	mov	sl, r4
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	0039      	movs	r1, r7
 8001322:	4311      	orrs	r1, r2
 8001324:	d0e5      	beq.n	80012f2 <__gedf2+0x2e>
 8001326:	2002      	movs	r0, #2
 8001328:	4240      	negs	r0, r0
 800132a:	e7f4      	b.n	8001316 <__gedf2+0x52>
 800132c:	4330      	orrs	r0, r6
 800132e:	d1fa      	bne.n	8001326 <__gedf2+0x62>
 8001330:	42ac      	cmp	r4, r5
 8001332:	d00f      	beq.n	8001354 <__gedf2+0x90>
 8001334:	2c00      	cmp	r4, #0
 8001336:	d10f      	bne.n	8001358 <__gedf2+0x94>
 8001338:	433a      	orrs	r2, r7
 800133a:	d0e7      	beq.n	800130c <__gedf2+0x48>
 800133c:	e00c      	b.n	8001358 <__gedf2+0x94>
 800133e:	2201      	movs	r2, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	4393      	bics	r3, r2
 8001344:	0018      	movs	r0, r3
 8001346:	3001      	adds	r0, #1
 8001348:	e7e5      	b.n	8001316 <__gedf2+0x52>
 800134a:	4663      	mov	r3, ip
 800134c:	2000      	movs	r0, #0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0e1      	beq.n	8001316 <__gedf2+0x52>
 8001352:	e7db      	b.n	800130c <__gedf2+0x48>
 8001354:	433a      	orrs	r2, r7
 8001356:	d1e6      	bne.n	8001326 <__gedf2+0x62>
 8001358:	459a      	cmp	sl, r3
 800135a:	d1d7      	bne.n	800130c <__gedf2+0x48>
 800135c:	42a5      	cmp	r5, r4
 800135e:	dcd5      	bgt.n	800130c <__gedf2+0x48>
 8001360:	42a5      	cmp	r5, r4
 8001362:	db05      	blt.n	8001370 <__gedf2+0xac>
 8001364:	42be      	cmp	r6, r7
 8001366:	d8d1      	bhi.n	800130c <__gedf2+0x48>
 8001368:	d008      	beq.n	800137c <__gedf2+0xb8>
 800136a:	2000      	movs	r0, #0
 800136c:	42be      	cmp	r6, r7
 800136e:	d2d2      	bcs.n	8001316 <__gedf2+0x52>
 8001370:	4650      	mov	r0, sl
 8001372:	2301      	movs	r3, #1
 8001374:	3801      	subs	r0, #1
 8001376:	4398      	bics	r0, r3
 8001378:	3001      	adds	r0, #1
 800137a:	e7cc      	b.n	8001316 <__gedf2+0x52>
 800137c:	45c8      	cmp	r8, r9
 800137e:	d8c5      	bhi.n	800130c <__gedf2+0x48>
 8001380:	2000      	movs	r0, #0
 8001382:	45c8      	cmp	r8, r9
 8001384:	d3f4      	bcc.n	8001370 <__gedf2+0xac>
 8001386:	e7c6      	b.n	8001316 <__gedf2+0x52>
 8001388:	000007ff 	.word	0x000007ff

0800138c <__ledf2>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	464f      	mov	r7, r9
 8001390:	4646      	mov	r6, r8
 8001392:	46d6      	mov	lr, sl
 8001394:	004d      	lsls	r5, r1, #1
 8001396:	b5c0      	push	{r6, r7, lr}
 8001398:	030e      	lsls	r6, r1, #12
 800139a:	0fc9      	lsrs	r1, r1, #31
 800139c:	468a      	mov	sl, r1
 800139e:	492e      	ldr	r1, [pc, #184]	; (8001458 <__ledf2+0xcc>)
 80013a0:	031f      	lsls	r7, r3, #12
 80013a2:	005c      	lsls	r4, r3, #1
 80013a4:	4680      	mov	r8, r0
 80013a6:	0b36      	lsrs	r6, r6, #12
 80013a8:	0d6d      	lsrs	r5, r5, #21
 80013aa:	4691      	mov	r9, r2
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d64      	lsrs	r4, r4, #21
 80013b0:	0fdb      	lsrs	r3, r3, #31
 80013b2:	428d      	cmp	r5, r1
 80013b4:	d018      	beq.n	80013e8 <__ledf2+0x5c>
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d011      	beq.n	80013de <__ledf2+0x52>
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	d118      	bne.n	80013f0 <__ledf2+0x64>
 80013be:	4330      	orrs	r0, r6
 80013c0:	4684      	mov	ip, r0
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d11e      	bne.n	8001404 <__ledf2+0x78>
 80013c6:	433a      	orrs	r2, r7
 80013c8:	d11c      	bne.n	8001404 <__ledf2+0x78>
 80013ca:	4663      	mov	r3, ip
 80013cc:	2000      	movs	r0, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d030      	beq.n	8001434 <__ledf2+0xa8>
 80013d2:	4651      	mov	r1, sl
 80013d4:	2002      	movs	r0, #2
 80013d6:	3901      	subs	r1, #1
 80013d8:	4008      	ands	r0, r1
 80013da:	3801      	subs	r0, #1
 80013dc:	e02a      	b.n	8001434 <__ledf2+0xa8>
 80013de:	0039      	movs	r1, r7
 80013e0:	4311      	orrs	r1, r2
 80013e2:	d0ea      	beq.n	80013ba <__ledf2+0x2e>
 80013e4:	2002      	movs	r0, #2
 80013e6:	e025      	b.n	8001434 <__ledf2+0xa8>
 80013e8:	4330      	orrs	r0, r6
 80013ea:	d1fb      	bne.n	80013e4 <__ledf2+0x58>
 80013ec:	42ac      	cmp	r4, r5
 80013ee:	d026      	beq.n	800143e <__ledf2+0xb2>
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	d126      	bne.n	8001442 <__ledf2+0xb6>
 80013f4:	433a      	orrs	r2, r7
 80013f6:	d124      	bne.n	8001442 <__ledf2+0xb6>
 80013f8:	4651      	mov	r1, sl
 80013fa:	2002      	movs	r0, #2
 80013fc:	3901      	subs	r1, #1
 80013fe:	4008      	ands	r0, r1
 8001400:	3801      	subs	r0, #1
 8001402:	e017      	b.n	8001434 <__ledf2+0xa8>
 8001404:	4662      	mov	r2, ip
 8001406:	2a00      	cmp	r2, #0
 8001408:	d00f      	beq.n	800142a <__ledf2+0x9e>
 800140a:	459a      	cmp	sl, r3
 800140c:	d1e1      	bne.n	80013d2 <__ledf2+0x46>
 800140e:	42a5      	cmp	r5, r4
 8001410:	db05      	blt.n	800141e <__ledf2+0x92>
 8001412:	42be      	cmp	r6, r7
 8001414:	d8dd      	bhi.n	80013d2 <__ledf2+0x46>
 8001416:	d019      	beq.n	800144c <__ledf2+0xc0>
 8001418:	2000      	movs	r0, #0
 800141a:	42be      	cmp	r6, r7
 800141c:	d20a      	bcs.n	8001434 <__ledf2+0xa8>
 800141e:	4650      	mov	r0, sl
 8001420:	2301      	movs	r3, #1
 8001422:	3801      	subs	r0, #1
 8001424:	4398      	bics	r0, r3
 8001426:	3001      	adds	r0, #1
 8001428:	e004      	b.n	8001434 <__ledf2+0xa8>
 800142a:	2201      	movs	r2, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	4393      	bics	r3, r2
 8001430:	0018      	movs	r0, r3
 8001432:	3001      	adds	r0, #1
 8001434:	bc1c      	pop	{r2, r3, r4}
 8001436:	4690      	mov	r8, r2
 8001438:	4699      	mov	r9, r3
 800143a:	46a2      	mov	sl, r4
 800143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143e:	433a      	orrs	r2, r7
 8001440:	d1d0      	bne.n	80013e4 <__ledf2+0x58>
 8001442:	459a      	cmp	sl, r3
 8001444:	d1c5      	bne.n	80013d2 <__ledf2+0x46>
 8001446:	42a5      	cmp	r5, r4
 8001448:	dcc3      	bgt.n	80013d2 <__ledf2+0x46>
 800144a:	e7e0      	b.n	800140e <__ledf2+0x82>
 800144c:	45c8      	cmp	r8, r9
 800144e:	d8c0      	bhi.n	80013d2 <__ledf2+0x46>
 8001450:	2000      	movs	r0, #0
 8001452:	45c8      	cmp	r8, r9
 8001454:	d3e3      	bcc.n	800141e <__ledf2+0x92>
 8001456:	e7ed      	b.n	8001434 <__ledf2+0xa8>
 8001458:	000007ff 	.word	0x000007ff

0800145c <HAL_ADC_ConvCpltCallback>:
static uint32_t avg_pot;
static uint8_t channel;
static uint32_t raw_volt;
static uint32_t raw_temp;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

	switch(channel)
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_ADC_ConvCpltCallback+0x90>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d01a      	beq.n	80014a2 <HAL_ADC_ConvCpltCallback+0x46>
 800146c:	2b02      	cmp	r3, #2
 800146e:	d020      	beq.n	80014b2 <HAL_ADC_ConvCpltCallback+0x56>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d126      	bne.n	80014c2 <HAL_ADC_ConvCpltCallback+0x66>
	{
	case 0:
		{
			raw_pot = avg_pot >> ADC_Q;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0a1a      	lsrs	r2, r3, #8
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_ADC_ConvCpltCallback+0x98>)
 800147c:	601a      	str	r2, [r3, #0]
			avg_pot -= raw_pot;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1a9a      	subs	r2, r3, r2
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x94>)
 800148a:	601a      	str	r2, [r3, #0]
			avg_pot += HAL_ADC_GetValue(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fdf6 	bl	8002080 <HAL_ADC_GetValue>
 8001494:	0002      	movs	r2, r0
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	18d2      	adds	r2, r2, r3
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x94>)
 800149e:	601a      	str	r2, [r3, #0]
		} break;
 80014a0:	e00f      	b.n	80014c2 <HAL_ADC_ConvCpltCallback+0x66>
	case 1:
		{
			raw_temp = HAL_ADC_GetValue(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 fdeb 	bl	8002080 <HAL_ADC_GetValue>
 80014aa:	0002      	movs	r2, r0
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x9c>)
 80014ae:	601a      	str	r2, [r3, #0]
		}break;
 80014b0:	e007      	b.n	80014c2 <HAL_ADC_ConvCpltCallback+0x66>
	case 2:
		{
			raw_volt = HAL_ADC_GetValue(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 fde3 	bl	8002080 <HAL_ADC_GetValue>
 80014ba:	0002      	movs	r2, r0
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_ADC_ConvCpltCallback+0xa0>)
 80014be:	601a      	str	r2, [r3, #0]
		}break;
 80014c0:	46c0      	nop			; (mov r8, r8)
	}
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) channel = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2208      	movs	r2, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d103      	bne.n	80014d8 <HAL_ADC_ConvCpltCallback+0x7c>
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_ADC_ConvCpltCallback+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
		else channel++;

}
 80014d6:	e005      	b.n	80014e4 <HAL_ADC_ConvCpltCallback+0x88>
		else channel++;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_ADC_ConvCpltCallback+0x90>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_ADC_ConvCpltCallback+0x90>)
 80014e2:	701a      	strb	r2, [r3, #0]
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000038 	.word	0x20000038
 80014f0:	20000034 	.word	0x20000034
 80014f4:	20000030 	.word	0x20000030
 80014f8:	20000040 	.word	0x20000040
 80014fc:	2000003c 	.word	0x2000003c

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sct_init();
 8001506:	f000 fa3f 	bl	8001988 <sct_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fb81 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f8bf 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 f981 	bl	8001818 <MX_GPIO_Init>
  MX_ADC_Init();
 8001516:	f000 f90b 	bl	8001730 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 800151a:	4b51      	ldr	r3, [pc, #324]	; (8001660 <main+0x160>)
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fff5 	bl	800250c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(5);
 8001522:	2005      	movs	r0, #5
 8001524:	f000 fbd8 	bl	8001cd8 <HAL_Delay>
  HAL_ADC_Start_IT(&hadc);
 8001528:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <main+0x160>)
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fd36 	bl	8001f9c <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin(GPIOC, S2_Pin))
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <main+0x164>)
 8001532:	2101      	movs	r1, #1
 8001534:	0018      	movs	r0, r3
 8001536:	f001 fad5 	bl	8002ae4 <HAL_GPIO_ReadPin>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d108      	bne.n	8001550 <main+0x50>
	  {
		  btn_pressed = HAL_GetTick();
 800153e:	f000 fbc1 	bl	8001cc4 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <main+0x168>)
 8001546:	601a      	str	r2, [r3, #0]
		  state = SHOW_VOLT;
 8001548:	4b48      	ldr	r3, [pc, #288]	; (800166c <main+0x16c>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e01f      	b.n	8001590 <main+0x90>
	  }
	  else if (!HAL_GPIO_ReadPin(GPIOC, S1_Pin))
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <main+0x164>)
 8001552:	2102      	movs	r1, #2
 8001554:	0018      	movs	r0, r3
 8001556:	f001 fac5 	bl	8002ae4 <HAL_GPIO_ReadPin>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d108      	bne.n	8001570 <main+0x70>
	  {
		  btn_pressed = HAL_GetTick();
 800155e:	f000 fbb1 	bl	8001cc4 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <main+0x168>)
 8001566:	601a      	str	r2, [r3, #0]
		  state = SHOW_TEMP;
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <main+0x16c>)
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e00f      	b.n	8001590 <main+0x90>
	  }
	  else if (( HAL_GetTick()-btn_pressed)>1000)
 8001570:	f000 fba8 	bl	8001cc4 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <main+0x168>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	23fa      	movs	r3, #250	; 0xfa
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d905      	bls.n	8001590 <main+0x90>
	  {
		  btn_pressed  = 0;
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <main+0x168>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
		  state = SHOW_POT;
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <main+0x16c>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	  }


	  switch(state)
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <main+0x16c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d023      	beq.n	80015e0 <main+0xe0>
 8001598:	2b02      	cmp	r3, #2
 800159a:	d03a      	beq.n	8001612 <main+0x112>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d15a      	bne.n	8001656 <main+0x156>
	  {
	  	  case SHOW_POT:
	  	  {
	  		sct_value(raw_pot/(4095.0/501.0),raw_pot/(4095/9));
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x170>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff fdc3 	bl	8001130 <__aeabi_ui2d>
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <main+0x174>)
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <main+0x178>)
 80015ae:	f7fe ff3f 	bl	8000430 <__aeabi_ddiv>
 80015b2:	0003      	movs	r3, r0
 80015b4:	000c      	movs	r4, r1
 80015b6:	0018      	movs	r0, r3
 80015b8:	0021      	movs	r1, r4
 80015ba:	f7fe ff1b 	bl	80003f4 <__aeabi_d2uiz>
 80015be:	0003      	movs	r3, r0
 80015c0:	b29c      	uxth	r4, r3
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <main+0x170>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	23c8      	movs	r3, #200	; 0xc8
 80015c8:	33ff      	adds	r3, #255	; 0xff
 80015ca:	0019      	movs	r1, r3
 80015cc:	0010      	movs	r0, r2
 80015ce:	f7fe fd9b 	bl	8000108 <__udivsi3>
 80015d2:	0003      	movs	r3, r0
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	0019      	movs	r1, r3
 80015d8:	0020      	movs	r0, r4
 80015da:	f000 f9dd 	bl	8001998 <sct_value>
	  	  }break;
 80015de:	e03a      	b.n	8001656 <main+0x156>
	  	  case SHOW_VOLT:
	  	  {
	  		uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <main+0x17c>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	189b      	adds	r3, r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	001a      	movs	r2, r3
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <main+0x180>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0019      	movs	r1, r3
 80015fa:	0010      	movs	r0, r2
 80015fc:	f7fe fd84 	bl	8000108 <__udivsi3>
 8001600:	0003      	movs	r3, r0
 8001602:	603b      	str	r3, [r7, #0]
	  		sct_value(voltage,0);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	2100      	movs	r1, #0
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f9c4 	bl	8001998 <sct_value>
	  	  }break;
 8001610:	e021      	b.n	8001656 <main+0x156>
	  	  case SHOW_TEMP:
	  	  {
	  		int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <main+0x184>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <main+0x188>)
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	607b      	str	r3, [r7, #4]
	  		temperature = temperature * (int32_t)(110 - 30);
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	0013      	movs	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	189b      	adds	r3, r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	607b      	str	r3, [r7, #4]
	  		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <main+0x18c>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	001a      	movs	r2, r3
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <main+0x188>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	0019      	movs	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7fe fdef 	bl	800021c <__divsi3>
 800163e:	0003      	movs	r3, r0
 8001640:	607b      	str	r3, [r7, #4]
	  		temperature = temperature + 30;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	331e      	adds	r3, #30
 8001646:	607b      	str	r3, [r7, #4]

	  		sct_value(temperature,0);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	b29b      	uxth	r3, r3
 800164c:	2100      	movs	r1, #0
 800164e:	0018      	movs	r0, r3
 8001650:	f000 f9a2 	bl	8001998 <sct_value>
	  	  }break;
 8001654:	46c0      	nop			; (mov r8, r8)
	  }

	  HAL_Delay(50);
 8001656:	2032      	movs	r0, #50	; 0x32
 8001658:	f000 fb3e 	bl	8001cd8 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(GPIOC, S2_Pin))
 800165c:	e768      	b.n	8001530 <main+0x30>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20000044 	.word	0x20000044
 8001664:	48000800 	.word	0x48000800
 8001668:	2000002c 	.word	0x2000002c
 800166c:	20000028 	.word	0x20000028
 8001670:	20000030 	.word	0x20000030
 8001674:	01886e5f 	.word	0x01886e5f
 8001678:	402058e9 	.word	0x402058e9
 800167c:	1ffff7ba 	.word	0x1ffff7ba
 8001680:	2000003c 	.word	0x2000003c
 8001684:	20000040 	.word	0x20000040
 8001688:	1ffff7b8 	.word	0x1ffff7b8
 800168c:	1ffff7c2 	.word	0x1ffff7c2

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b091      	sub	sp, #68	; 0x44
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	2410      	movs	r4, #16
 8001698:	193b      	adds	r3, r7, r4
 800169a:	0018      	movs	r0, r3
 800169c:	2330      	movs	r3, #48	; 0x30
 800169e:	001a      	movs	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f001 fecb 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a6:	003b      	movs	r3, r7
 80016a8:	0018      	movs	r0, r3
 80016aa:	2310      	movs	r3, #16
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	f001 fec4 	bl	800343c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80016b4:	0021      	movs	r1, r4
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2212      	movs	r2, #18
 80016ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2201      	movs	r2, #1
 80016c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2210      	movs	r2, #16
 80016cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2210      	movs	r2, #16
 80016d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2202      	movs	r2, #2
 80016d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	22a0      	movs	r2, #160	; 0xa0
 80016e4:	0392      	lsls	r2, r2, #14
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	0018      	movs	r0, r3
 80016f2:	f001 fa31 	bl	8002b58 <HAL_RCC_OscConfig>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016fa:	f000 f90b 	bl	8001914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	003b      	movs	r3, r7
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	003b      	movs	r3, r7
 8001706:	2202      	movs	r2, #2
 8001708:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	003b      	movs	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001710:	003b      	movs	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001716:	003b      	movs	r3, r7
 8001718:	2101      	movs	r1, #1
 800171a:	0018      	movs	r0, r3
 800171c:	f001 fd38 	bl	8003190 <HAL_RCC_ClockConfig>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001724:	f000 f8f6 	bl	8001914 <Error_Handler>
  }
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b011      	add	sp, #68	; 0x44
 800172e:	bd90      	pop	{r4, r7, pc}

08001730 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	0018      	movs	r0, r3
 800173a:	230c      	movs	r3, #12
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f001 fe7c 	bl	800343c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <MX_ADC_Init+0xe0>)
 8001746:	4a33      	ldr	r2, [pc, #204]	; (8001814 <MX_ADC_Init+0xe4>)
 8001748:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <MX_ADC_Init+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <MX_ADC_Init+0xe0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <MX_ADC_Init+0xe0>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <MX_ADC_Init+0xe0>)
 800175e:	2201      	movs	r2, #1
 8001760:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <MX_ADC_Init+0xe0>)
 8001764:	2204      	movs	r2, #4
 8001766:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <MX_ADC_Init+0xe0>)
 800176a:	2200      	movs	r2, #0
 800176c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_ADC_Init+0xe0>)
 8001770:	2200      	movs	r2, #0
 8001772:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <MX_ADC_Init+0xe0>)
 8001776:	2201      	movs	r2, #1
 8001778:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_ADC_Init+0xe0>)
 800177c:	2200      	movs	r2, #0
 800177e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_ADC_Init+0xe0>)
 8001782:	22c2      	movs	r2, #194	; 0xc2
 8001784:	32ff      	adds	r2, #255	; 0xff
 8001786:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_ADC_Init+0xe0>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_ADC_Init+0xe0>)
 8001790:	2224      	movs	r2, #36	; 0x24
 8001792:	2100      	movs	r1, #0
 8001794:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_ADC_Init+0xe0>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_ADC_Init+0xe0>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fabc 	bl	8001d1c <HAL_ADC_Init>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f000 f8b4 	bl	8001914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0152      	lsls	r2, r2, #5
 80017b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2207      	movs	r2, #7
 80017be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017c0:	1d3a      	adds	r2, r7, #4
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_ADC_Init+0xe0>)
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fd2e 	bl	8002228 <HAL_ADC_ConfigChannel>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80017d0:	f000 f8a0 	bl	8001914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2210      	movs	r2, #16
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017da:	1d3a      	adds	r2, r7, #4
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_ADC_Init+0xe0>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f000 fd21 	bl	8002228 <HAL_ADC_ConfigChannel>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80017ea:	f000 f893 	bl	8001914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2211      	movs	r2, #17
 80017f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017f4:	1d3a      	adds	r2, r7, #4
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_ADC_Init+0xe0>)
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fd14 	bl	8002228 <HAL_ADC_ConfigChannel>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001804:	f000 f886 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000044 	.word	0x20000044
 8001814:	40012400 	.word	0x40012400

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	240c      	movs	r4, #12
 8001820:	193b      	adds	r3, r7, r4
 8001822:	0018      	movs	r0, r3
 8001824:	2314      	movs	r3, #20
 8001826:	001a      	movs	r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	f001 fe07 	bl	800343c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_GPIO_Init+0xf0>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <MX_GPIO_Init+0xf0>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0309      	lsls	r1, r1, #12
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <MX_GPIO_Init+0xf0>)
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <MX_GPIO_Init+0xf0>)
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <MX_GPIO_Init+0xf0>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0289      	lsls	r1, r1, #10
 8001854:	430a      	orrs	r2, r1
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_GPIO_Init+0xf0>)
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	029b      	lsls	r3, r3, #10
 8001860:	4013      	ands	r3, r2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <MX_GPIO_Init+0xf0>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_GPIO_Init+0xf0>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	02c9      	lsls	r1, r1, #11
 8001870:	430a      	orrs	r2, r1
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_GPIO_Init+0xf0>)
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	02db      	lsls	r3, r3, #11
 800187c:	4013      	ands	r3, r2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8001882:	2387      	movs	r3, #135	; 0x87
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4821      	ldr	r0, [pc, #132]	; (800190c <MX_GPIO_Init+0xf4>)
 8001888:	2200      	movs	r2, #0
 800188a:	0019      	movs	r1, r3
 800188c:	f001 f947 	bl	8002b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2203      	movs	r2, #3
 8001894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2201      	movs	r2, #1
 80018a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <MX_GPIO_Init+0xf8>)
 80018a6:	0019      	movs	r1, r3
 80018a8:	0010      	movs	r0, r2
 80018aa:	f000 ffab 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_NLA_Pin;
 80018ae:	0021      	movs	r1, r4
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	2284      	movs	r2, #132	; 0x84
 80018b4:	00d2      	lsls	r2, r2, #3
 80018b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2201      	movs	r2, #1
 80018bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	000c      	movs	r4, r1
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_GPIO_Init+0xf4>)
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f000 ff96 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_CLK_Pin SCT_SDI_Pin */
  GPIO_InitStruct.Pin = SCT_CLK_Pin|SCT_SDI_Pin;
 80018d8:	0021      	movs	r1, r4
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2218      	movs	r2, #24
 80018de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2201      	movs	r2, #1
 80018e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2201      	movs	r2, #1
 80018f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <MX_GPIO_Init+0xf4>)
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f000 ff83 	bl	8002804 <HAL_GPIO_Init>

}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b009      	add	sp, #36	; 0x24
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <sct_led>:
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)


void sct_led(uint32_t value)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j<32; j++)
 8001928:	230f      	movs	r3, #15
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e019      	b.n	8001966 <sct_led+0x46>
	{
		sct_sdi(value&1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d003      	beq.n	8001942 <sct_led+0x22>
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <sct_led+0x64>)
 800193c:	2210      	movs	r2, #16
 800193e:	619a      	str	r2, [r3, #24]
 8001940:	e002      	b.n	8001948 <sct_led+0x28>
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <sct_led+0x64>)
 8001944:	2210      	movs	r2, #16
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
		value=value>>1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <sct_led+0x64>)
 8001950:	2208      	movs	r2, #8
 8001952:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <sct_led+0x64>)
 8001956:	2208      	movs	r2, #8
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint8_t j = 0; j<32; j++)
 800195a:	210f      	movs	r1, #15
 800195c:	187b      	adds	r3, r7, r1
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	187b      	adds	r3, r7, r1
 8001962:	3201      	adds	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	230f      	movs	r3, #15
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b1f      	cmp	r3, #31
 800196e:	d9e0      	bls.n	8001932 <sct_led+0x12>
	}
	sct_nla(1);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <sct_led+0x64>)
 8001972:	2220      	movs	r2, #32
 8001974:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <sct_led+0x64>)
 8001978:	2220      	movs	r2, #32
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	48000400 	.word	0x48000400

08001988 <sct_init>:

void sct_init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	sct_led(0);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff ffc7 	bl	8001920 <sct_led>
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <sct_value>:

void sct_value(uint16_t value, uint16_t bargraph)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	1c0a      	adds	r2, r1, #0
 80019a8:	801a      	strh	r2, [r3, #0]
	value = value%1000;
 80019aa:	1dbc      	adds	r4, r7, #6
 80019ac:	1dbb      	adds	r3, r7, #6
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	23fa      	movs	r3, #250	; 0xfa
 80019b2:	0099      	lsls	r1, r3, #2
 80019b4:	0010      	movs	r0, r2
 80019b6:	f7fe fc2d 	bl	8000214 <__aeabi_uidivmod>
 80019ba:	000b      	movs	r3, r1
 80019bc:	8023      	strh	r3, [r4, #0]
	uint32_t out = reg_values[2][value%10];
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	210a      	movs	r1, #10
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe fc25 	bl	8000214 <__aeabi_uidivmod>
 80019ca:	000b      	movs	r3, r1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	001a      	movs	r2, r3
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <sct_value+0xe4>)
 80019d2:	3214      	adds	r2, #20
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	58d3      	ldr	r3, [r2, r3]
 80019d8:	60fb      	str	r3, [r7, #12]
	value = value /10;
 80019da:	1dbc      	adds	r4, r7, #6
 80019dc:	1dbb      	adds	r3, r7, #6
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	210a      	movs	r1, #10
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7fe fb90 	bl	8000108 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	8023      	strh	r3, [r4, #0]
	if(value>0)
 80019ec:	1dbb      	adds	r3, r7, #6
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d02b      	beq.n	8001a4c <sct_value+0xb4>
	{
		out |= reg_values[1][value%10];
 80019f4:	1dbb      	adds	r3, r7, #6
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	210a      	movs	r1, #10
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe fc0a 	bl	8000214 <__aeabi_uidivmod>
 8001a00:	000b      	movs	r3, r1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	001a      	movs	r2, r3
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <sct_value+0xe4>)
 8001a08:	320a      	adds	r2, #10
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	58d3      	ldr	r3, [r2, r3]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
		value = value /10;
 8001a14:	1dbc      	adds	r4, r7, #6
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	210a      	movs	r1, #10
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7fe fb73 	bl	8000108 <__udivsi3>
 8001a22:	0003      	movs	r3, r0
 8001a24:	8023      	strh	r3, [r4, #0]
		if(value>0)
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00e      	beq.n	8001a4c <sct_value+0xb4>
		{
			out |= reg_values[0][value%10];
 8001a2e:	1dbb      	adds	r3, r7, #6
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	210a      	movs	r1, #10
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fbed 	bl	8000214 <__aeabi_uidivmod>
 8001a3a:	000b      	movs	r3, r1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	001a      	movs	r2, r3
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <sct_value+0xe4>)
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	58d3      	ldr	r3, [r2, r3]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
		}
	}
	out |= reg_values[3][bargraph%10];
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	210a      	movs	r1, #10
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7fe fbde 	bl	8000214 <__aeabi_uidivmod>
 8001a58:	000b      	movs	r3, r1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <sct_value+0xe4>)
 8001a60:	321e      	adds	r2, #30
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
	sct_led(out);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff ff56 	bl	8001920 <sct_led>
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b005      	add	sp, #20
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	080034c4 	.word	0x080034c4

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0549      	lsls	r1, r1, #21
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	61da      	str	r2, [r3, #28]
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	055b      	lsls	r3, r3, #21
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	2314      	movs	r3, #20
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	2314      	movs	r3, #20
 8001ad8:	001a      	movs	r2, r3
 8001ada:	2100      	movs	r1, #0
 8001adc:	f001 fcae 	bl	800343c <memset>
  if(hadc->Instance==ADC1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_ADC_MspInit+0x94>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d134      	bne.n	8001b54 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0089      	lsls	r1, r1, #2
 8001af4:	430a      	orrs	r2, r1
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0289      	lsls	r1, r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_ADC_MspInit+0x98>)
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b22:	2114      	movs	r1, #20
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	187a      	adds	r2, r7, r1
 8001b38:	2390      	movs	r3, #144	; 0x90
 8001b3a:	05db      	lsls	r3, r3, #23
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fe60 	bl	8002804 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	200c      	movs	r0, #12
 8001b4a:	f000 fe29 	bl	80027a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b4e:	200c      	movs	r0, #12
 8001b50:	f000 fe3b 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b00a      	add	sp, #40	; 0x28
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40012400 	.word	0x40012400
 8001b60:	40021000 	.word	0x40021000

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f888 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <ADC1_IRQHandler+0x14>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 fa7a 	bl	8002098 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	20000044 	.word	0x20000044

08001bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd8:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001be6:	f7ff ffe3 	bl	8001bb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bea:	f001 fc03 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff fc87 	bl	8001500 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   r0, =_estack
 8001bf4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c00:	0800357c 	.word	0x0800357c
  ldr r2, =_sbss
 8001c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c08:	20000088 	.word	0x20000088

08001c0c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <DMA1_Channel1_IRQHandler>
	...

08001c10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_Init+0x24>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_Init+0x24>)
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f809 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c26:	f7ff ff2b 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_InitTick+0x60>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	0019      	movs	r1, r3
 8001c4a:	23fa      	movs	r3, #250	; 0xfa
 8001c4c:	0098      	lsls	r0, r3, #2
 8001c4e:	f7fe fa5b 	bl	8000108 <__udivsi3>
 8001c52:	0003      	movs	r3, r0
 8001c54:	0019      	movs	r1, r3
 8001c56:	0020      	movs	r0, r4
 8001c58:	f7fe fa56 	bl	8000108 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fdc3 	bl	80027ea <HAL_SYSTICK_Config>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e00f      	b.n	8001c8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d80b      	bhi.n	8001c8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2301      	movs	r3, #1
 8001c76:	425b      	negs	r3, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fd90 	bl	80027a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_InitTick+0x64>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b003      	add	sp, #12
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	18d2      	adds	r2, r2, r3
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000084 	.word	0x20000084

08001cc4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	20000084 	.word	0x20000084

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_Delay+0x40>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	189b      	adds	r3, r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	f7ff ffe0 	bl	8001cc4 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b004      	add	sp, #16
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e125      	b.n	8001f86 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2234      	movs	r2, #52	; 0x34
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff feb8 	bl	8001ac8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d000      	beq.n	8001d64 <HAL_ADC_Init+0x48>
 8001d62:	e103      	b.n	8001f6c <HAL_ADC_Init+0x250>
 8001d64:	230f      	movs	r3, #15
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d000      	beq.n	8001d70 <HAL_ADC_Init+0x54>
 8001d6e:	e0fd      	b.n	8001f6c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2204      	movs	r2, #4
 8001d78:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001d7a:	d000      	beq.n	8001d7e <HAL_ADC_Init+0x62>
 8001d7c:	e0f6      	b.n	8001f6c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	4a83      	ldr	r2, [pc, #524]	; (8001f90 <HAL_ADC_Init+0x274>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	2202      	movs	r2, #2
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d112      	bne.n	8001dc2 <HAL_ADC_Init+0xa6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d009      	beq.n	8001dbe <HAL_ADC_Init+0xa2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	401a      	ands	r2, r3
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0xa6>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_Init+0xa8>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d116      	bne.n	8001df6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2218      	movs	r2, #24
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	0899      	lsrs	r1, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4964      	ldr	r1, [pc, #400]	; (8001f94 <HAL_ADC_Init+0x278>)
 8001e02:	400a      	ands	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e1b      	ldrb	r3, [r3, #24]
 8001e0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e5b      	ldrb	r3, [r3, #25]
 8001e10:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e12:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e9b      	ldrb	r3, [r3, #26]
 8001e18:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001e1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_Init+0x10e>
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_Init+0x110>
 8001e2a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e2c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e32:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_Init+0x124>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_Init+0x126>
 8001e40:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001e42:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2124      	movs	r1, #36	; 0x24
 8001e48:	5c5b      	ldrb	r3, [r3, r1]
 8001e4a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e4c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7edb      	ldrb	r3, [r3, #27]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d115      	bne.n	8001e88 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e9b      	ldrb	r3, [r3, #26]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0252      	lsls	r2, r2, #9
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	e00b      	b.n	8001e88 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	2220      	movs	r2, #32
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2201      	movs	r2, #1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	23c2      	movs	r3, #194	; 0xc2
 8001e8e:	33ff      	adds	r3, #255	; 0xff
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d007      	beq.n	8001ea4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	055b      	lsls	r3, r3, #21
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d017      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d013      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d00f      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d00b      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d007      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d003      	beq.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d112      	bne.n	8001f1e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2107      	movs	r1, #7
 8001f04:	438a      	bics	r2, r1
 8001f06:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	2207      	movs	r2, #7
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_ADC_Init+0x27c>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d10b      	bne.n	8001f46 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f44:	e01c      	b.n	8001f80 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	2212      	movs	r2, #18
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	2210      	movs	r2, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001f62:	230f      	movs	r3, #15
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f6a:	e009      	b.n	8001f80 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	2210      	movs	r2, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781b      	ldrb	r3, [r3, #0]
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	fffffefd 	.word	0xfffffefd
 8001f94:	fffe0219 	.word	0xfffe0219
 8001f98:	833fffe7 	.word	0x833fffe7

08001f9c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d156      	bne.n	8002066 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2234      	movs	r2, #52	; 0x34
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Start_IT+0x2a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e056      	b.n	8002074 <HAL_ADC_Start_IT+0xd8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2234      	movs	r2, #52	; 0x34
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7e5b      	ldrb	r3, [r3, #25]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d007      	beq.n	8001fe6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fc      	adds	r4, r7, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fa19 	bl	8002414 <ADC_Enable>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fe6:	230f      	movs	r3, #15
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d13e      	bne.n	800206e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <HAL_ADC_Start_IT+0xe0>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0052      	lsls	r2, r2, #1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2234      	movs	r2, #52	; 0x34
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	221c      	movs	r2, #28
 8002016:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d110      	bne.n	8002042 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2104      	movs	r1, #4
 800202c:	438a      	bics	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2118      	movs	r1, #24
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
          break;
 8002040:	e008      	b.n	8002054 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	211c      	movs	r1, #28
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
          break;
 8002052:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2104      	movs	r1, #4
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e003      	b.n	800206e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002066:	230f      	movs	r3, #15
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800206e:	230f      	movs	r3, #15
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b005      	add	sp, #20
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	fffff0fe 	.word	0xfffff0fe

08002080 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2204      	movs	r2, #4
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_IRQHandler+0x24>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2204      	movs	r2, #4
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00d      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2208      	movs	r2, #8
 80020c4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d14f      	bne.n	800216a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2208      	movs	r2, #8
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d148      	bne.n	800216a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	2210      	movs	r2, #16
 80020de:	4013      	ands	r3, r2
 80020e0:	d106      	bne.n	80020f0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	23c0      	movs	r3, #192	; 0xc0
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d12d      	bne.n	800215a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002102:	2b00      	cmp	r3, #0
 8002104:	d129      	bne.n	800215a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	4013      	ands	r3, r2
 8002110:	2b08      	cmp	r3, #8
 8002112:	d122      	bne.n	800215a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2204      	movs	r2, #4
 800211c:	4013      	ands	r3, r2
 800211e:	d110      	bne.n	8002142 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	210c      	movs	r1, #12
 800212c:	438a      	bics	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_ADC_IRQHandler+0x16c>)
 8002136:	4013      	ands	r3, r2
 8002138:	2201      	movs	r2, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
 8002140:	e00b      	b.n	800215a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	2220      	movs	r2, #32
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	2201      	movs	r2, #1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff f97d 	bl	800145c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	4013      	ands	r3, r2
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d115      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x10c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	4013      	ands	r3, r2
 8002182:	2b80      	cmp	r3, #128	; 0x80
 8002184:	d10e      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0252      	lsls	r2, r2, #9
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f836 	bl	8002208 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2210      	movs	r2, #16
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d123      	bne.n	80021fa <HAL_ADC_IRQHandler+0x162>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2210      	movs	r2, #16
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d11c      	bne.n	80021fa <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d006      	beq.n	80021d6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10d      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2202      	movs	r2, #2
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2210      	movs	r2, #16
 80021e8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 f813 	bl	8002218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2210      	movs	r2, #16
 80021f8:	601a      	str	r2, [r3, #0]
  }

}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	fffffefe 	.word	0xfffffefe

08002208 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002232:	230f      	movs	r3, #15
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	055b      	lsls	r3, r3, #21
 8002246:	429a      	cmp	r2, r3
 8002248:	d011      	beq.n	800226e <HAL_ADC_ConfigChannel+0x46>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d00d      	beq.n	800226e <HAL_ADC_ConfigChannel+0x46>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	2b02      	cmp	r3, #2
 8002258:	d009      	beq.n	800226e <HAL_ADC_ConfigChannel+0x46>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2b03      	cmp	r3, #3
 8002260:	d005      	beq.n	800226e <HAL_ADC_ConfigChannel+0x46>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	2b04      	cmp	r3, #4
 8002268:	d001      	beq.n	800226e <HAL_ADC_ConfigChannel+0x46>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2234      	movs	r2, #52	; 0x34
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x54>
 8002278:	2302      	movs	r3, #2
 800227a:	e0bb      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2234      	movs	r2, #52	; 0x34
 8002280:	2101      	movs	r1, #1
 8002282:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2204      	movs	r2, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d000      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x6a>
 8002290:	e09f      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_ADC_ConfigChannel+0x1d4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_ADC_ConfigChannel+0x76>
 800229c:	e077      	b.n	800238e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	055b      	lsls	r3, r3, #21
 80022bc:	429a      	cmp	r2, r3
 80022be:	d037      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d033      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d02f      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d02b      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d027      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d023      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d01f      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d01b      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2107      	movs	r1, #7
 8002304:	400b      	ands	r3, r1
 8002306:	429a      	cmp	r2, r3
 8002308:	d012      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2107      	movs	r1, #7
 8002316:	438a      	bics	r2, r1
 8002318:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6959      	ldr	r1, [r3, #20]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2207      	movs	r2, #7
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b10      	cmp	r3, #16
 8002336:	d003      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x118>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b11      	cmp	r3, #17
 800233e:	d152      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <HAL_ADC_ConfigChannel+0x1d8>)
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d102      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x12a>
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	e001      	b.n	8002356 <HAL_ADC_ConfigChannel+0x12e>
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	03db      	lsls	r3, r3, #15
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_ADC_ConfigChannel+0x1d8>)
 8002358:	430b      	orrs	r3, r1
 800235a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b10      	cmp	r3, #16
 8002362:	d140      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_ADC_ConfigChannel+0x1dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4927      	ldr	r1, [pc, #156]	; (8002408 <HAL_ADC_ConfigChannel+0x1e0>)
 800236a:	0018      	movs	r0, r3
 800236c:	f7fd fecc 	bl	8000108 <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	001a      	movs	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	189b      	adds	r3, r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237e:	e002      	b.n	8002386 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3b01      	subs	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x158>
 800238c:	e02b      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4099      	lsls	r1, r3
 800239c:	000b      	movs	r3, r1
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d003      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x190>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b11      	cmp	r3, #17
 80023b6:	d116      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_ConfigChannel+0x1d8>)
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1a0>
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_ADC_ConfigChannel+0x1e4>)
 80023c6:	e000      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1a2>
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_ADC_ConfigChannel+0x1e8>)
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_ADC_ConfigChannel+0x1d8>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e009      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	2220      	movs	r2, #32
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80023de:	230f      	movs	r3, #15
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2234      	movs	r2, #52	; 0x34
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023ee:	230f      	movs	r3, #15
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	781b      	ldrb	r3, [r3, #0]
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	00001001 	.word	0x00001001
 8002400:	40012708 	.word	0x40012708
 8002404:	20000000 	.word	0x20000000
 8002408:	000f4240 	.word	0x000f4240
 800240c:	ff7fffff 	.word	0xff7fffff
 8002410:	ffbfffff 	.word	0xffbfffff

08002414 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2203      	movs	r2, #3
 800242c:	4013      	ands	r3, r2
 800242e:	2b01      	cmp	r3, #1
 8002430:	d112      	bne.n	8002458 <ADC_Enable+0x44>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	2b01      	cmp	r3, #1
 800243e:	d009      	beq.n	8002454 <ADC_Enable+0x40>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	401a      	ands	r2, r3
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	429a      	cmp	r2, r3
 8002452:	d101      	bne.n	8002458 <ADC_Enable+0x44>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <ADC_Enable+0x46>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d14b      	bne.n	80024f6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <ADC_Enable+0xec>)
 8002466:	4013      	ands	r3, r2
 8002468:	d00d      	beq.n	8002486 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2210      	movs	r2, #16
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	2201      	movs	r2, #1
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e038      	b.n	80024f8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <ADC_Enable+0xf0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	491b      	ldr	r1, [pc, #108]	; (8002508 <ADC_Enable+0xf4>)
 800249c:	0018      	movs	r0, r3
 800249e:	f7fd fe33 	bl	8000108 <__udivsi3>
 80024a2:	0003      	movs	r3, r0
 80024a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a6:	e002      	b.n	80024ae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024b4:	f7ff fc06 	bl	8001cc4 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024bc:	e014      	b.n	80024e8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7ff fc01 	bl	8001cc4 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d90d      	bls.n	80024e8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	2210      	movs	r2, #16
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	2201      	movs	r2, #1
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e007      	b.n	80024f8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d1e3      	bne.n	80024be <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b004      	add	sp, #16
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	80000017 	.word	0x80000017
 8002504:	20000000 	.word	0x20000000
 8002508:	000f4240 	.word	0x000f4240

0800250c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2317      	movs	r3, #23
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2234      	movs	r2, #52	; 0x34
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADCEx_Calibration_Start+0x26>
 800252e:	2302      	movs	r3, #2
 8002530:	e084      	b.n	800263c <HAL_ADCEx_Calibration_Start+0x130>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2234      	movs	r2, #52	; 0x34
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
 8002544:	2b01      	cmp	r3, #1
 8002546:	d112      	bne.n	800256e <HAL_ADCEx_Calibration_Start+0x62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	2b01      	cmp	r3, #1
 8002554:	d009      	beq.n	800256a <HAL_ADCEx_Calibration_Start+0x5e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	401a      	ands	r2, r3
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	429a      	cmp	r2, r3
 8002568:	d101      	bne.n	800256e <HAL_ADCEx_Calibration_Start+0x62>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_ADCEx_Calibration_Start+0x64>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d152      	bne.n	800261a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_ADCEx_Calibration_Start+0x138>)
 800257a:	4013      	ands	r3, r2
 800257c:	2202      	movs	r2, #2
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2203      	movs	r2, #3
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2103      	movs	r1, #3
 800259c:	438a      	bics	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	0609      	lsls	r1, r1, #24
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80025b2:	f7ff fb87 	bl	8001cc4 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80025ba:	e014      	b.n	80025e6 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025bc:	f7ff fb82 	bl	8001cc4 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d90d      	bls.n	80025e6 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	2212      	movs	r2, #18
 80025d0:	4393      	bics	r3, r2
 80025d2:	2210      	movs	r2, #16
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2234      	movs	r2, #52	; 0x34
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e02a      	b.n	800263c <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	0fdb      	lsrs	r3, r3, #31
 80025ee:	07da      	lsls	r2, r3, #31
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d0e1      	beq.n	80025bc <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	2203      	movs	r2, #3
 800260e:	4393      	bics	r3, r2
 8002610:	2201      	movs	r2, #1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
 8002618:	e009      	b.n	800262e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	2220      	movs	r2, #32
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2234      	movs	r2, #52	; 0x34
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002636:	2317      	movs	r3, #23
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b006      	add	sp, #24
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fffffefd 	.word	0xfffffefd

08002648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	0002      	movs	r2, r0
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002654:	1dfb      	adds	r3, r7, #7
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b7f      	cmp	r3, #127	; 0x7f
 800265a:	d809      	bhi.n	8002670 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	001a      	movs	r2, r3
 8002662:	231f      	movs	r3, #31
 8002664:	401a      	ands	r2, r3
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_EnableIRQ+0x30>)
 8002668:	2101      	movs	r1, #1
 800266a:	4091      	lsls	r1, r2
 800266c:	000a      	movs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
  }
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	0002      	movs	r2, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b7f      	cmp	r3, #127	; 0x7f
 8002690:	d828      	bhi.n	80026e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <__NVIC_SetPriority+0xd4>)
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b25b      	sxtb	r3, r3
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	33c0      	adds	r3, #192	; 0xc0
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	589b      	ldr	r3, [r3, r2]
 80026a2:	1dfa      	adds	r2, r7, #7
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	0011      	movs	r1, r2
 80026a8:	2203      	movs	r2, #3
 80026aa:	400a      	ands	r2, r1
 80026ac:	00d2      	lsls	r2, r2, #3
 80026ae:	21ff      	movs	r1, #255	; 0xff
 80026b0:	4091      	lsls	r1, r2
 80026b2:	000a      	movs	r2, r1
 80026b4:	43d2      	mvns	r2, r2
 80026b6:	401a      	ands	r2, r3
 80026b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	401a      	ands	r2, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	0018      	movs	r0, r3
 80026c8:	2303      	movs	r3, #3
 80026ca:	4003      	ands	r3, r0
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d0:	481f      	ldr	r0, [pc, #124]	; (8002750 <__NVIC_SetPriority+0xd4>)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b25b      	sxtb	r3, r3
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	430a      	orrs	r2, r1
 80026dc:	33c0      	adds	r3, #192	; 0xc0
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026e2:	e031      	b.n	8002748 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <__NVIC_SetPriority+0xd8>)
 80026e6:	1dfb      	adds	r3, r7, #7
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	0019      	movs	r1, r3
 80026ec:	230f      	movs	r3, #15
 80026ee:	400b      	ands	r3, r1
 80026f0:	3b08      	subs	r3, #8
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3306      	adds	r3, #6
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	3304      	adds	r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1dfa      	adds	r2, r7, #7
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	0011      	movs	r1, r2
 8002704:	2203      	movs	r2, #3
 8002706:	400a      	ands	r2, r1
 8002708:	00d2      	lsls	r2, r2, #3
 800270a:	21ff      	movs	r1, #255	; 0xff
 800270c:	4091      	lsls	r1, r2
 800270e:	000a      	movs	r2, r1
 8002710:	43d2      	mvns	r2, r2
 8002712:	401a      	ands	r2, r3
 8002714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	22ff      	movs	r2, #255	; 0xff
 800271c:	401a      	ands	r2, r3
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	0018      	movs	r0, r3
 8002724:	2303      	movs	r3, #3
 8002726:	4003      	ands	r3, r0
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800272c:	4809      	ldr	r0, [pc, #36]	; (8002754 <__NVIC_SetPriority+0xd8>)
 800272e:	1dfb      	adds	r3, r7, #7
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	001c      	movs	r4, r3
 8002734:	230f      	movs	r3, #15
 8002736:	4023      	ands	r3, r4
 8002738:	3b08      	subs	r3, #8
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	430a      	orrs	r2, r1
 800273e:	3306      	adds	r3, #6
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	18c3      	adds	r3, r0, r3
 8002744:	3304      	adds	r3, #4
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b003      	add	sp, #12
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <SysTick_Config+0x40>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e010      	b.n	8002790 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <SysTick_Config+0x44>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	3a01      	subs	r2, #1
 8002774:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	2301      	movs	r3, #1
 8002778:	425b      	negs	r3, r3
 800277a:	2103      	movs	r1, #3
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff ff7d 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <SysTick_Config+0x44>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x44>)
 800278a:	2207      	movs	r2, #7
 800278c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00ffffff 	.word	0x00ffffff
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	210f      	movs	r1, #15
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	1c02      	adds	r2, r0, #0
 80027b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff ff5d 	bl	800267c <__NVIC_SetPriority>
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	0002      	movs	r2, r0
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff ff33 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff ffaf 	bl	8002758 <SysTick_Config>
 80027fa:	0003      	movs	r3, r0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002812:	e14f      	b.n	8002ab4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4091      	lsls	r1, r2
 800281e:	000a      	movs	r2, r1
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <HAL_GPIO_Init+0x28>
 800282a:	e140      	b.n	8002aae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00b      	beq.n	800284c <HAL_GPIO_Init+0x48>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002840:	2b11      	cmp	r3, #17
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b12      	cmp	r3, #18
 800284a:	d130      	bne.n	80028ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	409a      	lsls	r2, r3
 800285a:	0013      	movs	r3, r2
 800285c:	43da      	mvns	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	409a      	lsls	r2, r3
 800286e:	0013      	movs	r3, r2
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002882:	2201      	movs	r2, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
 8002888:	0013      	movs	r3, r2
 800288a:	43da      	mvns	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	2201      	movs	r2, #1
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0xea>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d123      	bne.n	8002936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	58d3      	ldr	r3, [r2, r3]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2207      	movs	r2, #7
 8002900:	4013      	ands	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	409a      	lsls	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	43da      	mvns	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2107      	movs	r1, #7
 800291a:	400b      	ands	r3, r1
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	6939      	ldr	r1, [r7, #16]
 8002934:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	409a      	lsls	r2, r3
 8002944:	0013      	movs	r3, r2
 8002946:	43da      	mvns	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	401a      	ands	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	055b      	lsls	r3, r3, #21
 8002972:	4013      	ands	r3, r2
 8002974:	d100      	bne.n	8002978 <HAL_GPIO_Init+0x174>
 8002976:	e09a      	b.n	8002aae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002978:	4b54      	ldr	r3, [pc, #336]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 800297e:	2101      	movs	r1, #1
 8002980:	430a      	orrs	r2, r1
 8002982:	619a      	str	r2, [r3, #24]
 8002984:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	589b      	ldr	r3, [r3, r2]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2203      	movs	r2, #3
 80029a2:	4013      	ands	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	409a      	lsls	r2, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	43da      	mvns	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	2390      	movs	r3, #144	; 0x90
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x1e2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x1de>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <HAL_GPIO_Init+0x2d4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x1da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a42      	ldr	r2, [pc, #264]	; (8002adc <HAL_GPIO_Init+0x2d8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x1d6>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029da:	2305      	movs	r3, #5
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029e6:	2300      	movs	r3, #0
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	2103      	movs	r1, #3
 80029ec:	400a      	ands	r2, r1
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	035b      	lsls	r3, r3, #13
 8002a72:	4013      	ands	r3, r2
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	039b      	lsls	r3, r3, #14
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	40da      	lsrs	r2, r3
 8002abc:	1e13      	subs	r3, r2, #0
 8002abe:	d000      	beq.n	8002ac2 <HAL_GPIO_Init+0x2be>
 8002ac0:	e6a8      	b.n	8002814 <HAL_GPIO_Init+0x10>
  } 
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b006      	add	sp, #24
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	48000800 	.word	0x48000800
 8002adc:	48000c00 	.word	0x48000c00
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	000a      	movs	r2, r1
 8002aee:	1cbb      	adds	r3, r7, #2
 8002af0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	1cba      	adds	r2, r7, #2
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	4013      	ands	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002afe:	230f      	movs	r3, #15
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e003      	b.n	8002b10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	781b      	ldrb	r3, [r3, #0]
  }
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	0008      	movs	r0, r1
 8002b28:	0011      	movs	r1, r2
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	1c02      	adds	r2, r0, #0
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	1c7b      	adds	r3, r7, #1
 8002b32:	1c0a      	adds	r2, r1, #0
 8002b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b36:	1c7b      	adds	r3, r7, #1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3e:	1cbb      	adds	r3, r7, #2
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b46:	e003      	b.n	8002b50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b48:	1cbb      	adds	r3, r7, #2
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e303      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	d100      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1e>
 8002b74:	e08d      	b.n	8002c92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b76:	4bc4      	ldr	r3, [pc, #784]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00e      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b82:	4bc1      	ldr	r3, [pc, #772]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	220c      	movs	r2, #12
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x64>
 8002b8e:	4bbe      	ldr	r3, [pc, #760]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	025b      	lsls	r3, r3, #9
 8002b96:	401a      	ands	r2, r3
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	025b      	lsls	r3, r3, #9
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4bb9      	ldr	r3, [pc, #740]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d100      	bne.n	8002bae <HAL_RCC_OscConfig+0x56>
 8002bac:	e070      	b.n	8002c90 <HAL_RCC_OscConfig+0x138>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d000      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x60>
 8002bb6:	e06b      	b.n	8002c90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e2da      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x7c>
 8002bc4:	4bb0      	ldr	r3, [pc, #704]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4baf      	ldr	r3, [pc, #700]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0249      	lsls	r1, r1, #9
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e02f      	b.n	8002c34 <HAL_RCC_OscConfig+0xdc>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x9e>
 8002bdc:	4baa      	ldr	r3, [pc, #680]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4ba9      	ldr	r3, [pc, #676]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002be2:	49aa      	ldr	r1, [pc, #680]	; (8002e8c <HAL_RCC_OscConfig+0x334>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4ba7      	ldr	r3, [pc, #668]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4ba6      	ldr	r3, [pc, #664]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002bee:	49a8      	ldr	r1, [pc, #672]	; (8002e90 <HAL_RCC_OscConfig+0x338>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e01e      	b.n	8002c34 <HAL_RCC_OscConfig+0xdc>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d10e      	bne.n	8002c1c <HAL_RCC_OscConfig+0xc4>
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	02c9      	lsls	r1, r1, #11
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b9d      	ldr	r3, [pc, #628]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0249      	lsls	r1, r1, #9
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xdc>
 8002c1c:	4b9a      	ldr	r3, [pc, #616]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b99      	ldr	r3, [pc, #612]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c22:	499a      	ldr	r1, [pc, #616]	; (8002e8c <HAL_RCC_OscConfig+0x334>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	4b97      	ldr	r3, [pc, #604]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c2e:	4998      	ldr	r1, [pc, #608]	; (8002e90 <HAL_RCC_OscConfig+0x338>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d014      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f842 	bl	8001cc4 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c46:	f7ff f83d 	bl	8001cc4 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e28c      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0xee>
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff f82d 	bl	8001cc4 <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f828 	bl	8001cc4 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e277      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	029b      	lsls	r3, r3, #10
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x118>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x146>
 8002c9c:	e069      	b.n	8002d72 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ca8:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	220c      	movs	r2, #12
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d11c      	bne.n	8002cee <HAL_RCC_OscConfig+0x196>
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d116      	bne.n	8002cee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc0:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e24d      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	22f8      	movs	r2, #248	; 0xf8
 8002cdc:	4393      	bics	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00da      	lsls	r2, r3, #3
 8002ce6:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	e041      	b.n	8002d72 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d024      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf6:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fe ffdf 	bl	8001cc4 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe ffda 	bl	8001cc4 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e229      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2202      	movs	r2, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d0f1      	beq.n	8002d0c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b57      	ldr	r3, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22f8      	movs	r2, #248	; 0xf8
 8002d2e:	4393      	bics	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00da      	lsls	r2, r3, #3
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e018      	b.n	8002d72 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe ffba 	bl	8001cc4 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe ffb5 	bl	8001cc4 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e204      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d68:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1f1      	bne.n	8002d56 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2208      	movs	r2, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe ff98 	bl	8001cc4 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe ff93 	bl	8001cc4 <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1e2      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2202      	movs	r2, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	d0f1      	beq.n	8002d9a <HAL_RCC_OscConfig+0x242>
 8002db6:	e018      	b.n	8002dea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe ff7e 	bl	8001cc4 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe ff79 	bl	8001cc4 <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1c8      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d1f1      	bne.n	8002dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2204      	movs	r2, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	d100      	bne.n	8002df6 <HAL_RCC_OscConfig+0x29e>
 8002df4:	e0b6      	b.n	8002f64 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	231f      	movs	r3, #31
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	055b      	lsls	r3, r3, #21
 8002e06:	4013      	ands	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0549      	lsls	r1, r1, #21
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	055b      	lsls	r3, r3, #21
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e26:	231f      	movs	r3, #31
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x33c>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d11a      	bne.n	8002e70 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCC_OscConfig+0x33c>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_RCC_OscConfig+0x33c>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0049      	lsls	r1, r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e48:	f7fe ff3c 	bl	8001cc4 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fe ff37 	bl	8001cc4 <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e186      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x33c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x340>
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <HAL_RCC_OscConfig+0x330>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	621a      	str	r2, [r3, #32]
 8002e84:	e036      	b.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	fffbffff 	.word	0xfffbffff
 8002e94:	40007000 	.word	0x40007000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x362>
 8002ea0:	4bb6      	ldr	r3, [pc, #728]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	4bb5      	ldr	r3, [pc, #724]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	621a      	str	r2, [r3, #32]
 8002eac:	4bb3      	ldr	r3, [pc, #716]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	4bb2      	ldr	r3, [pc, #712]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	621a      	str	r2, [r3, #32]
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x384>
 8002ec2:	4bae      	ldr	r3, [pc, #696]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	4bad      	ldr	r3, [pc, #692]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ec8:	2104      	movs	r1, #4
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	621a      	str	r2, [r3, #32]
 8002ece:	4bab      	ldr	r3, [pc, #684]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	4baa      	ldr	r3, [pc, #680]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	621a      	str	r2, [r3, #32]
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
 8002edc:	4ba7      	ldr	r3, [pc, #668]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	4ba6      	ldr	r3, [pc, #664]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	621a      	str	r2, [r3, #32]
 8002ee8:	4ba4      	ldr	r3, [pc, #656]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4ba3      	ldr	r3, [pc, #652]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002eee:	2104      	movs	r1, #4
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fee2 	bl	8001cc4 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fedd 	bl	8001cc4 <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	4a9b      	ldr	r2, [pc, #620]	; (8003180 <HAL_RCC_OscConfig+0x628>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e12b      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b98      	ldr	r3, [pc, #608]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x3ae>
 8002f24:	e013      	b.n	8002f4e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fecd 	bl	8001cc4 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e009      	b.n	8002f44 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe fec8 	bl	8001cc4 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	4a91      	ldr	r2, [pc, #580]	; (8003180 <HAL_RCC_OscConfig+0x628>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e116      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b8d      	ldr	r3, [pc, #564]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f4e:	231f      	movs	r3, #31
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	4b87      	ldr	r3, [pc, #540]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f5e:	4989      	ldr	r1, [pc, #548]	; (8003184 <HAL_RCC_OscConfig+0x62c>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d12a      	bne.n	8002fcc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f76:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7a:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f82:	4b7e      	ldr	r3, [pc, #504]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fe99 	bl	8001cc4 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f98:	f7fe fe94 	bl	8001cc4 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0e3      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0f1      	beq.n	8002f98 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fb4:	4b71      	ldr	r3, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	22f8      	movs	r2, #248	; 0xf8
 8002fba:	4393      	bics	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	00da      	lsls	r2, r3, #3
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fca:	e034      	b.n	8003036 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	3305      	adds	r3, #5
 8002fd2:	d111      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002fd4:	4b69      	ldr	r3, [pc, #420]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fda:	2104      	movs	r1, #4
 8002fdc:	438a      	bics	r2, r1
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fe0:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	22f8      	movs	r2, #248	; 0xf8
 8002fe6:	4393      	bics	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff6:	e01e      	b.n	8003036 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ff8:	4b60      	ldr	r3, [pc, #384]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffc:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8002ffe:	2104      	movs	r1, #4
 8003000:	430a      	orrs	r2, r1
 8003002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003004:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8003006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003008:	4b5c      	ldr	r3, [pc, #368]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800300a:	2101      	movs	r1, #1
 800300c:	438a      	bics	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fe58 	bl	8001cc4 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800301a:	f7fe fe53 	bl	8001cc4 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0a2      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800302c:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d1f1      	bne.n	800301a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d100      	bne.n	8003040 <HAL_RCC_OscConfig+0x4e8>
 800303e:	e097      	b.n	8003170 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003040:	4b4e      	ldr	r3, [pc, #312]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	220c      	movs	r2, #12
 8003046:	4013      	ands	r3, r2
 8003048:	2b08      	cmp	r3, #8
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x4f6>
 800304c:	e06b      	b.n	8003126 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d14c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800305c:	494a      	ldr	r1, [pc, #296]	; (8003188 <HAL_RCC_OscConfig+0x630>)
 800305e:	400a      	ands	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe fe2f 	bl	8001cc4 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fe2a 	bl	8001cc4 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e079      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	049b      	lsls	r3, r3, #18
 8003086:	4013      	ands	r3, r2
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	220f      	movs	r2, #15
 8003090:	4393      	bics	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x634>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	0449      	lsls	r1, r1, #17
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fdfd 	bl	8001cc4 <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fdf8 	bl	8001cc4 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e047      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	049b      	lsls	r3, r3, #18
 80030ea:	4013      	ands	r3, r2
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x578>
 80030ee:	e03f      	b.n	8003170 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x624>)
 80030f6:	4924      	ldr	r1, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x630>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fde2 	bl	8001cc4 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe fddd 	bl	8001cc4 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e02c      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	049b      	lsls	r3, r3, #18
 8003120:	4013      	ands	r3, r2
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x5ae>
 8003124:	e024      	b.n	8003170 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e01f      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_OscConfig+0x624>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x624>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	025b      	lsls	r3, r3, #9
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	429a      	cmp	r2, r3
 800314c:	d10e      	bne.n	800316c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	220f      	movs	r2, #15
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	23f0      	movs	r3, #240	; 0xf0
 8003160:	039b      	lsls	r3, r3, #14
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b008      	add	sp, #32
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	00001388 	.word	0x00001388
 8003184:	efffffff 	.word	0xefffffff
 8003188:	feffffff 	.word	0xfeffffff
 800318c:	ffc2ffff 	.word	0xffc2ffff

08003190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0b3      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d911      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4393      	bics	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e09a      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d015      	beq.n	800320c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2204      	movs	r2, #4
 80031e6:	4013      	ands	r3, r2
 80031e8:	d006      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031ea:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80031f0:	21e0      	movs	r1, #224	; 0xe0
 80031f2:	00c9      	lsls	r1, r1, #3
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	22f0      	movs	r2, #240	; 0xf0
 80031fe:	4393      	bics	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d040      	beq.n	8003298 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	4013      	ands	r3, r2
 8003228:	d114      	bne.n	8003254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06e      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b38      	ldr	r3, [pc, #224]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	049b      	lsls	r3, r3, #18
 800323e:	4013      	ands	r3, r2
 8003240:	d108      	bne.n	8003254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e062      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e05b      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2203      	movs	r2, #3
 800325a:	4393      	bics	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe fd2c 	bl	8001cc4 <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	e009      	b.n	8003286 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	f7fe fd27 	bl	8001cc4 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_RCC_ClockConfig+0x18c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e042      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	220c      	movs	r2, #12
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1ec      	bne.n	8003272 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d211      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4393      	bics	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x184>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2201      	movs	r2, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e020      	b.n	800330c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_RCC_ClockConfig+0x190>)
 80032da:	4013      	ands	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032e8:	f000 f820 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ec:	0001      	movs	r1, r0
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x188>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	220f      	movs	r2, #15
 80032f6:	4013      	ands	r3, r2
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x194>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	000a      	movs	r2, r1
 80032fe:	40da      	lsrs	r2, r3
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x198>)
 8003302:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fe fc97 	bl	8001c38 <HAL_InitTick>
  
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b004      	add	sp, #16
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	00001388 	.word	0x00001388
 8003320:	fffff8ff 	.word	0xfffff8ff
 8003324:	08003564 	.word	0x08003564
 8003328:	20000000 	.word	0x20000000

0800332c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08f      	sub	sp, #60	; 0x3c
 8003330:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003332:	2314      	movs	r3, #20
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003338:	ca13      	ldmia	r2!, {r0, r1, r4}
 800333a:	c313      	stmia	r3!, {r0, r1, r4}
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003346:	c313      	stmia	r3!, {r0, r1, r4}
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
 8003354:	2300      	movs	r3, #0
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	220c      	movs	r2, #12
 800336a:	4013      	ands	r3, r2
 800336c:	2b04      	cmp	r3, #4
 800336e:	d002      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x4a>
 8003370:	2b08      	cmp	r3, #8
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x50>
 8003374:	e02d      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800337a:	e02d      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	0c9b      	lsrs	r3, r3, #18
 8003380:	220f      	movs	r2, #15
 8003382:	4013      	ands	r3, r2
 8003384:	2214      	movs	r2, #20
 8003386:	18ba      	adds	r2, r7, r2
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc0>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	220f      	movs	r2, #15
 8003392:	4013      	ands	r3, r2
 8003394:	1d3a      	adds	r2, r7, #4
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800339a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	4013      	ands	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a6:	4812      	ldr	r0, [pc, #72]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a8:	f7fc feae 	bl	8000108 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	001a      	movs	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	4353      	muls	r3, r2
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
 80033b6:	e009      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ba:	000a      	movs	r2, r1
 80033bc:	0152      	lsls	r2, r2, #5
 80033be:	1a52      	subs	r2, r2, r1
 80033c0:	0193      	lsls	r3, r2, #6
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	185b      	adds	r3, r3, r1
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b00f      	add	sp, #60	; 0x3c
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	08003464 	.word	0x08003464
 80033e8:	08003474 	.word	0x08003474
 80033ec:	40021000 	.word	0x40021000
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	2600      	movs	r6, #0
 80033f8:	4d0c      	ldr	r5, [pc, #48]	; (800342c <__libc_init_array+0x38>)
 80033fa:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	2600      	movs	r6, #0
 8003406:	f000 f821 	bl	800344c <_init>
 800340a:	4d0a      	ldr	r5, [pc, #40]	; (8003434 <__libc_init_array+0x40>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	; (8003438 <__libc_init_array+0x44>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	00b3      	lsls	r3, r6, #2
 800341a:	58eb      	ldr	r3, [r5, r3]
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	00b3      	lsls	r3, r6, #2
 8003424:	58eb      	ldr	r3, [r5, r3]
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003574 	.word	0x08003574
 8003430:	08003574 	.word	0x08003574
 8003434:	08003574 	.word	0x08003574
 8003438:	08003578 	.word	0x08003578

0800343c <memset>:
 800343c:	0003      	movs	r3, r0
 800343e:	1812      	adds	r2, r2, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	7019      	strb	r1, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
